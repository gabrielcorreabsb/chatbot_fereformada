package br.com.fereformada.api.service;

import br.com.fereformada.api.dto.ContextItem;
import br.com.fereformada.api.dto.QueryResponse;
import br.com.fereformada.api.model.ContentChunk;
import br.com.fereformada.api.model.StudyNote;
import br.com.fereformada.api.model.Work;
import br.com.fereformada.api.repository.ContentChunkRepository;
import br.com.fereformada.api.repository.StudyNoteRepository;
import br.com.fereformada.api.repository.WorkRepository;
import com.pgvector.PGvector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

@Service
public class QueryService {

    private static final Logger logger = LoggerFactory.getLogger(QueryService.class);

    // ===== OTIMIZA√á√ÉO 3: CACHE =====
    private final Map<String, QueryResponse> responseCache = new ConcurrentHashMap<>();
    private final Map<String, PGvector> embeddingCache = new ConcurrentHashMap<>();
    private static final int MAX_CACHE_SIZE = 100;
    private static final int MAX_EMBEDDING_CACHE_SIZE = 500;

    // ===== STOP WORDS EM PORTUGU√äS =====
    private static final Set<String> STOP_WORDS = java.util.Set.of(
            "o", "a", "os", "as", "um", "uma", "de", "da", "do", "dos", "das",
            "em", "na", "no", "nas", "nos", "por", "para", "com", "sem", "sob",
            "que", "qual", "quais", "quando", "onde", "como", "e", "ou", "mas",
            "se", "n√£o", "sim", "√©", "s√£o", "foi", "foram", "ser", "estar",
            "ter", "haver", "fazer", "ir", "vir", "ver", "dar", "poder"
    );

    // ===== SIN√îNIMOS TEOL√ìGICOS =====
    private static final Map<String, List<String>> THEOLOGICAL_SYNONYMS = Map.ofEntries(
            Map.entry("salva√ß√£o", List.of("reden√ß√£o", "justifica√ß√£o", "soteriologia", "regenera√ß√£o")),
            Map.entry("pecado", List.of("transgress√£o", "iniquidade", "queda", "deprava√ß√£o", "mal")),
            Map.entry("deus", List.of("senhor", "criador", "pai", "soberano", "yahweh", "jeov√°")),
            Map.entry("f√©", List.of("cren√ßa", "confian√ßa", "fidelidade", "crer")),
            Map.entry("gra√ßa", List.of("favor", "miseric√≥rdia", "benevol√™ncia", "bondade")),
            Map.entry("elei√ß√£o", List.of("predestina√ß√£o", "escolha", "chamado", "eleitos")),
            Map.entry("igreja", List.of("congrega√ß√£o", "assembleia", "corpo", "noiva")),
            Map.entry("escritura", List.of("b√≠blia", "palavra", "sagradas", "escrituras")),
            Map.entry("batismo", List.of("batizar", "sacramento", "imers√£o", "aspers√£o")),
            Map.entry("ceia", List.of("comunh√£o", "eucaristia", "santa", "sacramento")),
            Map.entry("ora√ß√£o", List.of("orar", "s√∫plica", "intercess√£o", "peti√ß√£o")),
            Map.entry("santifica√ß√£o", List.of("santidade", "purifica√ß√£o", "consagra√ß√£o")),
            Map.entry("justifica√ß√£o", List.of("justificar", "declarar", "justo", "imputa√ß√£o")),
            Map.entry("cristo", List.of("jesus", "messias", "salvador", "redentor", "cordeiro"))
    );

    private final ContentChunkRepository contentChunkRepository;
    private final StudyNoteRepository studyNoteRepository;
    private final WorkRepository workRepository;
    private final GeminiApiClient geminiApiClient;

    public QueryService(ContentChunkRepository contentChunkRepository,
                        StudyNoteRepository studyNoteRepository,
                        WorkRepository workRepository,
                        GeminiApiClient geminiApiClient) {
        this.contentChunkRepository = contentChunkRepository;
        this.studyNoteRepository = studyNoteRepository;
        this.workRepository = workRepository;
        this.geminiApiClient = geminiApiClient;
    }

    public QueryResponse query(String userQuestion) {
        logger.info("Nova pergunta recebida: '{}'", userQuestion);

        // ===== OTIMIZA√á√ÉO 3: VERIFICAR CACHE =====
        String cacheKey = normalizeQuestion(userQuestion);
        if (responseCache.containsKey(cacheKey)) {
            logger.info("‚úÖ Cache hit para: '{}'", userQuestion);
            return responseCache.get(cacheKey);
        }

        // ===== OTIMIZA√á√ÉO 1: HYBRID SEARCH =====
        List<ContextItem> results = performHybridSearch(userQuestion);

        if (results.isEmpty()) {
            QueryResponse emptyResponse = new QueryResponse(
                    "N√£o encontrei informa√ß√µes relevantes nas fontes catalogadas. " +
                            "Tente reformular sua pergunta ou ser mais espec√≠fico.",
                    Collections.emptyList()
            );

            // N√£o cachear respostas vazias
            return emptyResponse;
        }

        // Log de qualidade
        double avgScore = results.stream()
                .mapToDouble(ContextItem::similarityScore)
                .average()
                .orElse(0.0);

        if (avgScore < 0.6) {
            logger.warn("‚ö†Ô∏è Baixa relev√¢ncia m√©dia ({}) para: '{}'",
                    String.format("%.2f", avgScore), userQuestion);
        }

        logger.info("üìä Construindo resposta com {} fontes (relev√¢ncia m√©dia: {})",
                results.size(), String.format("%.2f", avgScore));

        String prompt = buildOptimizedPrompt(userQuestion, results);
        String aiAnswer = geminiApiClient.generateContent(prompt);
        List<String> sources = results.stream().map(ContextItem::source).toList();

        QueryResponse response = new QueryResponse(aiAnswer, sources);

        // Cachear resposta se houver espa√ßo
        if (responseCache.size() < MAX_CACHE_SIZE) {
            responseCache.put(cacheKey, response);
        }

        return response;
    }

    // ===== OTIMIZA√á√ÉO 1: HYBRID SEARCH =====
    private List<ContextItem> performHybridSearch(String userQuestion) {
        // 1. Busca vetorial (peso 70%)
        List<ContextItem> vectorResults = performVectorSearch(userQuestion);

        // 2. Verificar se precisa de busca por keywords
        List<ContextItem> keywordResults = Collections.emptyList();

        if (shouldUseKeywordSearch(userQuestion, vectorResults)) {
            logger.info("üîç Ativando busca por palavras-chave para melhorar resultados");
            keywordResults = performKeywordSearch(userQuestion);
        }

        // 3. Combinar e reranquear
        return combineAndRerankResults(vectorResults, keywordResults, userQuestion);
    }

    private boolean shouldUseKeywordSearch(String question, List<ContextItem> vectorResults) {
        // Ativar keyword search se:

        // 1. Resultados vetoriais fracos
        boolean hasWeakVectorResults = vectorResults.isEmpty() ||
                vectorResults.stream().allMatch(item -> item.similarityScore() < 0.7);

        // 2. NOVO: Pergunta explicitamente pede base b√≠blica
        boolean needsBiblicalFoundation = question.toLowerCase().matches(
                ".*(o que a b√≠blia|que diz a escritura|base b√≠blica|fundamenta√ß√£o|vers√≠culo|texto b√≠blico).*"
        );

        // 3. Pergunta cont√©m refer√™ncia b√≠blica espec√≠fica
        boolean hasBiblicalReference = question.matches(".*\\d+[:\\.]\\d+.*") ||
                question.toLowerCase().matches(".*(cap√≠tulo|vers√≠culo|verso|cap\\.|v\\.).*");

        // 4. NOVO: Pergunta sobre livros b√≠blicos espec√≠ficos
        boolean mentionsBiblicalBooks = question.toLowerCase().matches(
                ".*(g√™nesis|√™xodo|lev√≠tico|n√∫meros|deuteron√¥mio|josu√©|ju√≠zes|rute|samuel|reis|cr√¥nicas|" +
                        "esdras|neemias|ester|j√≥|salmos|prov√©rbios|eclesiastes|cantares|isa√≠as|jeremias|" +
                        "ezequiel|daniel|os√©ias|joel|am√≥s|obadias|jonas|miqu√©ias|naum|habacuque|sofonias|" +
                        "ageu|zacarias|malaquias|mateus|marcos|lucas|jo√£o|atos|romanos|cor√≠ntios|g√°latas|" +
                        "ef√©sios|filipenses|colossenses|tessalonicenses|tim√≥teo|tito|filemom|hebreus|tiago|" +
                        "pedro|apocalipse).*"
        );

        // 5. Pergunta cont√©m nomes espec√≠ficos de documentos
        boolean hasSpecificNames = question.toLowerCase().matches(
                ".*(westminster|calvino|catecismo|confiss√£o|institutas|genebra).*"
        );

        // 6. Pergunta muito curta (prov√°vel busca factual)
        boolean isShortQuery = question.split("\\s+").length <= 5;

        return hasWeakVectorResults || needsBiblicalFoundation || hasBiblicalReference ||
                mentionsBiblicalBooks || hasSpecificNames || isShortQuery;
    }

    private List<ContextItem> performKeywordSearch(String question) {
        Set<String> keywords = extractImportantKeywords(question);

        if (keywords.isEmpty()) {
            return Collections.emptyList();
        }

        List<ContextItem> results = new ArrayList<>();

        try {
            List<String> topKeywords = keywords.stream()
                    .filter(k -> k.length() > 3)
                    .filter(k -> !STOP_WORDS.contains(k))
                    .sorted(Comparator.comparingInt(String::length).reversed())
                    .limit(5)
                    .collect(Collectors.toList());

            if (topKeywords.isEmpty()) {
                logger.debug("Nenhuma keyword v√°lida encontrada");
                return Collections.emptyList();
            }

            logger.debug("üîç Buscando por {} keywords: {}", topKeywords.size(), topKeywords);

            Pageable limit3 = PageRequest.of(0, 3);
            Set<Long> processedChunkIds = new HashSet<>();
            Set<Long> processedNoteIds = new HashSet<>();

            for (String keyword : topKeywords) {
                try {
                    logger.debug("  ‚Üí Buscando por: '{}'", keyword);

                    // ‚úÖ NOVO: Try-catch individual para cada keyword
                    try {
                        List<ContentChunk> chunks = contentChunkRepository.searchByKeywords(keyword, limit3);
                        for (ContentChunk chunk : chunks) {
                            if (!processedChunkIds.contains(chunk.getId())) {
                                double score = calculateEnhancedKeywordScore(chunk.getContent(), keywords, keyword);
                                results.add(ContextItem.from(chunk, score));
                                processedChunkIds.add(chunk.getId());
                            }
                        }
                    } catch (Exception chunkError) {
                        logger.warn("  ‚ö†Ô∏è Erro ao buscar chunks para '{}': {}", keyword, chunkError.getMessage());
                    }

                    try {
                        List<StudyNote> notes = studyNoteRepository.searchByKeywords(keyword, limit3);
                        for (StudyNote note : notes) {
                            if (!processedNoteIds.contains(note.getId())) {
                                double score = calculateEnhancedKeywordScore(note.getNoteContent(), keywords, keyword);
                                results.add(ContextItem.from(note, score));
                                processedNoteIds.add(note.getId());
                            }
                        }
                    } catch (Exception noteError) {
                        logger.warn("  ‚ö†Ô∏è Erro ao buscar notas para '{}': {}", keyword, noteError.getMessage());
                    }

                } catch (Exception keywordError) {
                    logger.warn("  ‚ùå Erro geral para keyword '{}': {}", keyword, keywordError.getMessage());
                    continue; // Continua com pr√≥xima keyword
                }
            }

            logger.debug("‚úÖ Keyword search encontrou {} itens √∫nicos", results.size());

        } catch (Exception e) {
            logger.warn("‚ùå Erro na busca por keywords (usando apenas busca vetorial): {}", e.getMessage());
            // Retorna lista vazia - sistema continua s√≥ com busca vetorial
            return Collections.emptyList();
        }

        return results;
    }

    private Set<String> extractImportantKeywords(String question) {
        Set<String> keywords = new HashSet<>();
        String[] words = question.toLowerCase()
                .replaceAll("[?!.,;:]", "")
                .split("\\s+");

        // 1. Adicionar palavras principais
        for (String word : words) {
            // Pular stop words e palavras muito curtas
            if (word.length() > 2 && !STOP_WORDS.contains(word)) {
                keywords.add(word);

                // 2. Adicionar sin√¥nimos teol√≥gicos se aplic√°vel
                if (THEOLOGICAL_SYNONYMS.containsKey(word)) {
                    List<String> synonyms = THEOLOGICAL_SYNONYMS.get(word);
                    // Adicionar apenas os 3 sin√¥nimos mais importantes
                    keywords.addAll(synonyms.stream().limit(3).collect(Collectors.toList()));
                }
            }
        }

        // 3. Adicionar frases importantes
        addImportantPhrases(question.toLowerCase(), keywords);

        // 4. Priorizar termos teol√≥gicos espec√≠ficos
        prioritizeTheologicalTerms(keywords, question.toLowerCase());

        logger.debug("üî§ Keywords extra√≠das ({}): {}", keywords.size(),
                keywords.stream().limit(8).collect(Collectors.toList()));

        return keywords;
    }

    /**
     * D√° prioridade a termos teol√≥gicos importantes
     */
    private void prioritizeTheologicalTerms(Set<String> keywords, String question) {
        // Termos que sempre devem ser inclu√≠dos se aparecerem na pergunta
        String[] priorityTerms = {
                "deus", "cristo", "jesus", "esp√≠rito", "santo", "b√≠blia", "escritura",
                "salva√ß√£o", "gra√ßa", "f√©", "pecado", "justifica√ß√£o", "santifica√ß√£o",
                "elei√ß√£o", "predestina√ß√£o", "batismo", "ceia", "igreja", "ora√ß√£o"
        };

        for (String term : priorityTerms) {
            if (question.contains(term) && !keywords.contains(term)) {
                keywords.add(term);
            }
        }
    }

    private void addImportantPhrases(String question, Set<String> keywords) {
        // ===== FRASES IMPORTANTES =====
        Map<String, List<String>> importantPhrases = Map.ofEntries(
                Map.entry("esp√≠rito santo", List.of("esp√≠rito", "santo")),
                Map.entry("jesus cristo", List.of("jesus", "cristo")),
                Map.entry("palavra de deus", List.of("palavra", "deus")),
                Map.entry("reino de deus", List.of("reino", "deus")),
                Map.entry("filho de deus", List.of("filho", "deus")),
                Map.entry("corpo de cristo", List.of("corpo", "cristo")),
                Map.entry("novo testamento", List.of("novo", "testamento")),
                Map.entry("antigo testamento", List.of("antigo", "testamento")),
                Map.entry("sola scriptura", List.of("sola", "scriptura", "escritura")),
                Map.entry("sola fide", List.of("sola", "fide", "f√©"))
        );

        String questionLower = question.toLowerCase();
        for (Map.Entry<String, List<String>> entry : importantPhrases.entrySet()) {
            if (questionLower.contains(entry.getKey())) {
                keywords.addAll(entry.getValue());
            }
        }
    }

    private double calculateKeywordScore(String content, Set<String> keywords) {
        if (content == null || content.isEmpty()) {
            return 0.0;
        }

        String contentLower = content.toLowerCase();
        long matchCount = keywords.stream()
                .filter(contentLower::contains)
                .count();

        // Score entre 0 e 1 baseado na propor√ß√£o de keywords encontradas
        return (double) matchCount / keywords.size();
    }

    // ===== OTIMIZA√á√ÉO 2: RERANKING INTELIGENTE =====
    private List<ContextItem> combineAndRerankResults(
            List<ContextItem> vectorResults,
            List<ContextItem> keywordResults,
            String userQuestion) {

        Map<String, ContextItem> combined = new HashMap<>();

        // Adicionar resultados vetoriais com peso 0.7
        for (ContextItem item : vectorResults) {
            String key = generateItemKey(item);
            double adjustedScore = item.similarityScore() * 0.7;
            combined.put(key, item.withAdjustedScore(adjustedScore));
        }

        // Adicionar/mesclar resultados de keyword com peso 0.3
        for (ContextItem item : keywordResults) {
            String key = generateItemKey(item);
            if (combined.containsKey(key)) {
                ContextItem existing = combined.get(key);
                double newScore = existing.similarityScore() + (item.similarityScore() * 0.3);
                combined.put(key, existing.withAdjustedScore(newScore));
            } else {
                double adjustedScore = item.similarityScore() * 0.3;
                combined.put(key, item.withAdjustedScore(adjustedScore));
            }
        }

        // Aplicar boost por fonte e outros crit√©rios
        List<ContextItem> reranked = combined.values().stream()
                .map(item -> applySmartBoosts(item, userQuestion))
                .sorted(Comparator.comparing(ContextItem::similarityScore).reversed())
                .limit(5)
                .collect(Collectors.toList());

        logRerankedResults(reranked);
        return reranked;
    }

    private String generateItemKey(ContextItem item) {
        // Gerar chave √∫nica para detectar duplicatas
        return item.source() + "_" + item.content().substring(0, Math.min(50, item.content().length()));
    }

    private ContextItem applySmartBoosts(ContextItem item, String question) {
        double boost = 1.0;
        String source = item.source().toLowerCase();
        String questionLower = question.toLowerCase();
        String content = item.content().toLowerCase();

        // ===== NOVO: PRIORIDADE M√ÅXIMA PARA ESCRITURA =====
        // 1. BOOST SUPREMO para notas b√≠blicas (Sola Scriptura!)
        if (source.contains("b√≠blia de genebra")) {
            boost *= 1.4;  // MAIOR que qualquer documento confessional

            // Boost extra se cont√©m refer√™ncia b√≠blica direta
            if (content.matches(".*\\d+[:\\.]\\d+.*")) {
                boost *= 1.2;  // Total: 1.68x
            }

            // Boost extra para temas doutrin√°rios que precisam de base b√≠blica
            if (isDoctrinalQuestion(questionLower)) {
                boost *= 1.15; // Ainda mais boost para doutrina
            }
        }

        // 2. Documentos confessionais (subordinados √† Escritura)
        else if (source.contains("confiss√£o de f√©")) {
            boost *= 1.3;
        } else if (source.contains("catecismo maior")) {
            boost *= 1.25;
        } else if (source.contains("breve catecismo")) {
            boost *= 1.2;
        } else if (source.contains("institutas")) {
            boost *= 1.15;
        }

        // 3. Boost se tem estrutura pergunta/resposta
        if (item.question() != null && !item.question().isEmpty()) {
            boost *= 1.1;

            if (calculateSimilarity(item.question().toLowerCase(), questionLower) > 0.7) {
                boost *= 1.2;
            }
        }

        // 4. NOVO: Boost para conte√∫do que cita muitas refer√™ncias b√≠blicas
        int biblicalReferences = countBiblicalReferences(item.content());
        if (biblicalReferences > 2) {
            boost *= 1.1 + (biblicalReferences * 0.05); // Mais refer√™ncias = mais boost
        }

        // 5. Penalidade para conte√∫do muito curto
        if (item.content().length() < 100) {
            boost *= 0.8;
        }

        return item.withAdjustedScore(item.similarityScore() * boost);
    }

    // ===== NOVOS M√âTODOS AUXILIARES =====
    private boolean isDoctrinalQuestion(String question) {
        // Detectar perguntas que precisam de fundamenta√ß√£o b√≠blica s√≥lida
        String[] doctrinalKeywords = {
                "doutrina", "ensina", "b√≠blia", "escritura", "palavra", "deus",
                "salva√ß√£o", "pecado", "gra√ßa", "f√©", "justifica√ß√£o", "santifica√ß√£o",
                "elei√ß√£o", "predestina√ß√£o", "trindade", "cristo", "esp√≠rito",
                "igreja", "sacramento", "batismo", "ceia", "ora√ß√£o", "lei"
        };

        return Arrays.stream(doctrinalKeywords)
                .anyMatch(question::contains);
    }

    private int countBiblicalReferences(String content) {
        // Contar refer√™ncias b√≠blicas no formato "Livro X:Y" ou "X:Y"
        String pattern = "\\b\\d+[:\\.]\\d+(-\\d+)?\\b";
        return (int) content.split(pattern).length - 1;
    }

    private double calculateSimilarity(String text1, String text2) {
        // Similaridade simples baseada em palavras comuns
        Set<String> words1 = new HashSet<>(Arrays.asList(text1.split("\\s+")));
        Set<String> words2 = new HashSet<>(Arrays.asList(text2.split("\\s+")));

        Set<String> intersection = new HashSet<>(words1);
        intersection.retainAll(words2);

        Set<String> union = new HashSet<>(words1);
        union.addAll(words2);

        return union.isEmpty() ? 0.0 : (double) intersection.size() / union.size();
    }

    private void logRerankedResults(List<ContextItem> results) {
        logger.info("üìä Top {} resultados ap√≥s reranking:", results.size());

        // Contar por tipo de fonte
        long biblicalNotes = results.stream().filter(ContextItem::isBiblicalNote).count();
        long confessional = results.stream().filter(item -> !item.isBiblicalNote()).count();

        logger.info("  üìñ Fontes b√≠blicas: {}, ‚õ™ Fontes confessionais: {}", biblicalNotes, confessional);

        // Mostrar top 3 com mais detalhes
        for (int i = 0; i < Math.min(3, results.size()); i++) {
            ContextItem item = results.get(i);
            String type = item.isBiblicalNote() ? "üìñ" : "‚õ™";
            logger.info("  {}. {} [Score: {:.3f}] {}",
                    i + 1, type, item.similarityScore(), item.source());
        }

        // Log da qualidade geral
        double avgScore = results.stream()
                .mapToDouble(ContextItem::similarityScore)
                .average()
                .orElse(0.0);

        String qualityEmoji = avgScore > 0.8 ? "üî•" : avgScore > 0.6 ? "‚úÖ" : "‚ö†Ô∏è";
        logger.info("  {} Qualidade m√©dia: {:.1f}%", qualityEmoji, avgScore * 100);
    }

    // ===== BUSCA VETORIAL OTIMIZADA =====
    private List<ContextItem> performVectorSearch(String userQuestion) {
        // Usar cache de embeddings
        PGvector questionVector = getOrComputeEmbedding(userQuestion);

        if (questionVector == null) {
            logger.warn("‚ö†Ô∏è N√£o foi poss√≠vel gerar embedding para a pergunta");
            return Collections.emptyList();
        }

        // Buscar mais resultados inicialmente para melhor reranking
        List<Object[]> rawChunkResults = contentChunkRepository.findSimilarChunksRaw(
                questionVector.toString(), 5
        );
        List<ContextItem> chunkItems = convertRawChunkResultsToContextItems(rawChunkResults);

        List<Object[]> rawNoteResults = studyNoteRepository.findSimilarNotesRaw(
                questionVector.toString(), 5
        );
        List<ContextItem> noteItems = convertRawNoteResultsToContextItems(rawNoteResults);

        // Combinar e retornar todos (o reranking ser√° feito depois)
        List<ContextItem> combinedItems = new ArrayList<>();
        combinedItems.addAll(chunkItems);
        combinedItems.addAll(noteItems);

        return combinedItems;
    }

    // ===== CACHE DE EMBEDDINGS =====
    private PGvector getOrComputeEmbedding(String text) {
        // Limitar o texto para a chave do cache
        String cacheKey = text.length() > 200 ? text.substring(0, 200) : text;

        PGvector cached = embeddingCache.get(cacheKey);
        if (cached != null) {
            logger.debug("‚úÖ Embedding encontrado no cache");
            return cached;
        }

        PGvector computed = geminiApiClient.generateEmbedding(text);

        // Adicionar ao cache se houver espa√ßo
        if (computed != null && embeddingCache.size() < MAX_EMBEDDING_CACHE_SIZE) {
            embeddingCache.put(cacheKey, computed);
        }

        return computed;
    }

    // ===== NORMALIZA√á√ÉO PARA CACHE =====
    private String normalizeQuestion(String question) {
        return question.toLowerCase()
                .replaceAll("\\s+", " ")
                .replaceAll("[?!.,;:]", "")
                .trim();
    }

    // ===== PROMPT OTIMIZADO =====
    private String buildOptimizedPrompt(String question, List<ContextItem> items) {
        StringBuilder context = new StringBuilder();

        // ===== NOVO: SEPARAR FONTES B√çBLICAS DAS CONFESSIONAIS =====
        List<ContextItem> biblicalSources = items.stream()
                .filter(item -> item.source().contains("B√≠blia de Genebra"))
                .collect(Collectors.toList());

        List<ContextItem> confessionalSources = items.stream()
                .filter(item -> !item.source().contains("B√≠blia de Genebra"))
                .collect(Collectors.toList());

        // Mostrar fontes b√≠blicas primeiro
        if (!biblicalSources.isEmpty()) {
            context.append("üìñ FUNDAMENTA√á√ÉO B√çBLICA (Sola Scriptura):\n\n");
            int biblicalNumber = 1;
            for (ContextItem item : biblicalSources) {
                context.append(String.format("[B%d] %s\n", biblicalNumber++, item.source()));
                context.append("    üìú Texto: ").append(limitContent(item.content(), 600)).append("\n\n");
            }
        }

        // Depois mostrar fontes confessionais
        if (!confessionalSources.isEmpty()) {
            context.append("‚õ™ DOCUMENTOS CONFESSIONAIS (subordinados √† Escritura):\n\n");
            int confessionalNumber = 1;
            for (ContextItem item : confessionalSources) {
                context.append(String.format("[C%d] %s\n", confessionalNumber++, item.source()));

                if (item.question() != null && !item.question().isEmpty()) {
                    context.append("    üìù Pergunta: ").append(item.question()).append("\n");
                }

                context.append("    üìñ Conte√∫do: ").append(limitContent(item.content(), 500)).append("\n");
                context.append("    üéØ Relev√¢ncia: ").append(
                        String.format("%.1f%%", item.similarityScore() * 100)
                ).append("\n\n");
            }
        }

        return String.format("""
                Voc√™ √© um assistente teol√≥gico reformado que segue rigorosamente o princ√≠pio SOLA SCRIPTURA.
                
                PRINC√çPIOS FUNDAMENTAIS:
                1. A Escritura √© a autoridade suprema e infal√≠vel em quest√µes de f√© e pr√°tica.
                2. Os documentos confessionais (Westminster, Calvino) s√£o subordinados √† Escritura.
                3. SEMPRE priorize e cite primeiro as refer√™ncias b√≠blicas [B1, B2, etc.].
                4. Use os documentos confessionais [C1, C2, etc.] para explicar e sistematizar o ensino b√≠blico.
                5. Se houver conflito, a Escritura prevalece sobre qualquer documento humano.
                
                INSTRU√á√ïES ESPEC√çFICAS:
                - Comece sua resposta com a base b√≠blica quando dispon√≠vel
                - Cite as fontes usando [B1] para b√≠blicas e [C1] para confessionais
                - Explique como os documentos confessionais confirmam/sistematizam o ensino b√≠blico
                - Use tom professoral, mas sempre reverente √† Palavra de Deus
                - Termine com aplica√ß√£o pr√°tica baseada na Escritura
                
                %s
                
                PERGUNTA DO USU√ÅRIO:
                %s
                
                RESPOSTA (priorizando Sola Scriptura):
                """, context.toString(), question);
    }

    private String limitContent(String content, int maxLength) {
        if (content.length() <= maxLength) {
            return content;
        }
        return content.substring(0, maxLength) + "...";
    }

    // ===== M√âTODOS AUXILIARES EXISTENTES =====
    private List<ContextItem> convertRawChunkResultsToContextItems(List<Object[]> rawResults) {
        List<ContextItem> items = new ArrayList<>();
        for (Object[] row : rawResults) {
            try {
                Long workId = ((Number) row[7]).longValue();
                Work work = workRepository.findById(workId).orElse(null);

                ContentChunk chunk = new ContentChunk();
                chunk.setId(((Number) row[0]).longValue());
                chunk.setContent((String) row[1]);
                chunk.setQuestion((String) row[2]);
                chunk.setSectionTitle((String) row[3]);
                chunk.setChapterTitle((String) row[4]);
                chunk.setChapterNumber(row[5] != null ? ((Number) row[5]).intValue() : null);
                chunk.setSectionNumber(row[6] != null ? ((Number) row[6]).intValue() : null);
                chunk.setWork(work);

                double score = ((Number) row[8]).doubleValue();
                items.add(ContextItem.from(chunk, score));
            } catch (Exception e) {
                logger.warn("Erro ao converter resultado raw de chunk: {}", e.getMessage());
            }
        }
        return items;
    }

    private List<ContextItem> convertRawNoteResultsToContextItems(List<Object[]> rawResults) {
        List<ContextItem> items = new ArrayList<>();
        for (Object[] row : rawResults) {
            try {
                StudyNote note = new StudyNote();
                note.setId(((Number) row[0]).longValue());
                note.setBook((String) row[1]);
                note.setStartChapter(((Number) row[2]).intValue());
                note.setStartVerse(((Number) row[3]).intValue());
                note.setEndChapter(((Number) row[4]).intValue());
                note.setEndVerse(((Number) row[5]).intValue());
                note.setNoteContent((String) row[6]);

                double score = ((Number) row[7]).doubleValue();
                items.add(ContextItem.from(note, score));
            } catch (Exception e) {
                logger.warn("Erro ao converter resultado raw de note: {}", e.getMessage());
            }
        }
        return items;
    }

    // ===== M√âTODO PARA LIMPAR CACHE (√∫til para admin) =====
    public void clearCache() {
        responseCache.clear();
        embeddingCache.clear();
        logger.info("üßπ Cache limpo manualmente");
    }

    public Map<String, Integer> getCacheStats() {
        Map<String, Integer> stats = new HashMap<>();
        stats.put("responseCacheSize", responseCache.size());
        stats.put("embeddingCacheSize", embeddingCache.size());
        return stats;
    }

    private double calculateEnhancedKeywordScore(String content, Set<String> allKeywords, String triggerKeyword) {
        if (content == null || content.isEmpty()) {
            return 0.0;
        }

        String contentLower = content.toLowerCase();

        // 1. Contar matches √∫nicos
        long uniqueMatches = allKeywords.stream()
                .filter(contentLower::contains)
                .count();

        // 2. Score base (propor√ß√£o de keywords encontradas)
        double baseScore = (double) uniqueMatches / allKeywords.size();

        // 3. Boost para keyword que triggou a busca
        double triggerBoost = contentLower.contains(triggerKeyword.toLowerCase()) ? 1.2 : 1.0;

        // 4. Boost para densidade de keywords (quantas vezes aparecem)
        long totalMatches = allKeywords.stream()
                .mapToLong(keyword -> countOccurrences(contentLower, keyword.toLowerCase()))
                .sum();

        double densityBoost = 1.0 + (totalMatches * 0.05); // 5% boost por ocorr√™ncia extra
        densityBoost = Math.min(densityBoost, 2.0); // M√°ximo 2x boost

        // 5. Score final
        double finalScore = baseScore * triggerBoost * densityBoost;

        logger.debug("    üìä Score para '{}': base={:.2f}, trigger={:.2f}, density={:.2f}, final={:.2f}",
                triggerKeyword, baseScore, triggerBoost, densityBoost, finalScore);

        return Math.min(finalScore, 1.0); // M√°ximo 1.0
    }

    /**
     * Conta quantas vezes uma palavra aparece no texto
     */
    private long countOccurrences(String text, String word) {
        if (text == null || word == null || word.isEmpty()) {
            return 0;
        }

        int count = 0;
        int index = 0;

        while ((index = text.indexOf(word, index)) != -1) {
            count++;
            index += word.length();
        }

        return count;
    }
}