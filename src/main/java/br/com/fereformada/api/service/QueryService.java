package br.com.fereformada.api.service;

import br.com.fereformada.api.dto.*;
import br.com.fereformada.api.model.ContentChunk;
import br.com.fereformada.api.model.StudyNote;
import br.com.fereformada.api.model.Work;
import br.com.fereformada.api.repository.ContentChunkRepository;
import br.com.fereformada.api.repository.MensagemRepository;
import br.com.fereformada.api.repository.StudyNoteRepository;
import br.com.fereformada.api.repository.WorkRepository;
import br.com.fereformada.api.model.Mensagem;
import br.com.fereformada.api.repository.MensagemRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.pgvector.PGvector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Service
public class QueryService {

    private static final Logger logger = LoggerFactory.getLogger(QueryService.class);

    // ===== OTIMIZA√á√ÉO 3: CACHE =====
    private final Map<String, QueryServiceResult> responseCache = new ConcurrentHashMap<>();
    private final Map<String, PGvector> embeddingCache = new ConcurrentHashMap<>();
    private static final int MAX_CACHE_SIZE = 100;
    private static final int MAX_EMBEDDING_CACHE_SIZE = 500;


    // ===== STOP WORDS EM PORTUGU√äS =====
    private static final Set<String> STOP_WORDS = java.util.Set.of(
            "o", "a", "os", "as", "um", "uma", "de", "da", "do", "dos", "das",
            "em", "na", "no", "nas", "nos", "por", "para", "com", "sem", "sob",
            "que", "qual", "quais", "quando", "onde", "como", "e", "ou", "mas",
            "se", "n√£o", "sim", "√©", "s√£o", "foi", "foram", "ser", "estar",
            "ter", "haver", "fazer", "ir", "vir", "ver", "dar", "poder"
    );

    // ===== SIN√îNIMOS TEOL√ìGICOS =====
    private static final Map<String, List<String>> THEOLOGICAL_SYNONYMS = Map.ofEntries(
            Map.entry("salva√ß√£o", List.of("reden√ß√£o", "justifica√ß√£o", "soteriologia", "regenera√ß√£o")),
            Map.entry("pecado", List.of("transgress√£o", "iniquidade", "queda", "deprava√ß√£o", "mal")),
            Map.entry("deus", List.of("senhor", "criador", "pai", "soberano", "yahweh", "jeov√°")),
            Map.entry("f√©", List.of("cren√ßa", "confian√ßa", "fidelidade", "crer")),
            Map.entry("gra√ßa", List.of("favor", "miseric√≥rdia", "benevol√™ncia", "bondade")),
            Map.entry("elei√ß√£o", List.of("predestina√ß√£o", "escolha", "chamado", "eleitos")),
            Map.entry("igreja", List.of("congrega√ß√£o", "assembleia", "corpo", "noiva")),
            Map.entry("escritura", List.of("b√≠blia", "palavra", "sagradas", "escrituras")),
            Map.entry("batismo", List.of("batizar", "sacramento", "imers√£o", "aspers√£o")),
            Map.entry("ceia", List.of("comunh√£o", "eucaristia", "santa", "sacramento")),
            Map.entry("ora√ß√£o", List.of("orar", "s√∫plica", "intercess√£o", "peti√ß√£o")),
            Map.entry("santifica√ß√£o", List.of("santidade", "purifica√ß√£o", "consagra√ß√£o")),
            Map.entry("justifica√ß√£o", List.of("justificar", "declarar", "justo", "imputa√ß√£o")),
            Map.entry("cristo", List.of("jesus", "messias", "salvador", "redentor", "cordeiro"))
    );

    private final ContentChunkRepository contentChunkRepository;
    private final StudyNoteRepository studyNoteRepository;
    private final WorkRepository workRepository;
    private final GeminiApiClient geminiApiClient;
    private final MensagemRepository mensagemRepository;
    private final QueryAnalyzer queryAnalyzer;
    private final ObjectMapper objectMapper;

    public QueryService(ContentChunkRepository contentChunkRepository,
                        StudyNoteRepository studyNoteRepository,
                        WorkRepository workRepository,
                        GeminiApiClient geminiApiClient, MensagemRepository mensagemRepository, QueryAnalyzer queryAnalyzer, ObjectMapper objectMapper) {
        this.contentChunkRepository = contentChunkRepository;
        this.studyNoteRepository = studyNoteRepository;
        this.workRepository = workRepository;
        this.geminiApiClient = geminiApiClient;
        this.mensagemRepository = mensagemRepository;
        this.queryAnalyzer = queryAnalyzer;
        this.objectMapper = objectMapper;
    }


    public QueryServiceResult query(ChatRequest request) {

        String userQuestion = request.question();
        UUID chatId = request.chatId();

        // --- 1. Verifica√ß√£o de Refer√™ncia Direta (FAST-PATH) ---
        Optional<QueryServiceResult> directResponse = handleDirectReferenceQuery(userQuestion);
        if (directResponse.isPresent()) {
            logger.info("‚úÖ Resposta gerada via busca direta por refer√™ncia (Regex).");
            return directResponse.get();
        }

        logger.info("Nova pergunta recebida: '{}' (ChatID: {})", userQuestion, chatId);

        // --- 2. Verifica√ß√£o de Cache ---
        String cacheKey = normalizeQuestion(userQuestion);
        if (responseCache.containsKey(cacheKey)) {
            logger.info("‚úÖ Cache hit para: '{}'", userQuestion);
            return responseCache.get(cacheKey);
        }

        // --- 3. Carregar Hist√≥rico ---
        List<Mensagem> chatHistory = new ArrayList<>();
        if (chatId != null) {
            chatHistory = mensagemRepository.findByConversaIdOrderByCreatedAtAsc(chatId);
            logger.info("Carregado {} mensagens do hist√≥rico do chat {}", chatHistory.size(), chatId);
        }

        // --- 4. NOVO: An√°lise da Pergunta (SLOW-PATH) ---
        MetadataFilter filter = queryAnalyzer.extractFilters(userQuestion, chatHistory);
        if (!filter.isEmpty()) {
            logger.info("üß† Filtros de metadados extra√≠dos via LLM: {}", filter);
        } else {
            logger.info("Buscando por (busca sem√¢ntica pura): '{}'", userQuestion);
        }

        // --- 5. L√ìGICA DE RAG CONVERSACIONAL (Mantido e Corrigido) ---
        // Define a query base. 'ragQuery' ser√° a string usada para a busca sem√¢ntica.
        String ragQuery = userQuestion;

        Optional<Integer> sourceNum = extractSourceNumberFromQuestion(userQuestion);
        if (sourceNum.isPresent()) {
            logger.info("Detectada pergunta de acompanhamento para a fonte n√∫mero {}", sourceNum.get());
            Optional<String> extractedSource = extractSourceFromHistory(chatHistory, sourceNum.get());

            if (extractedSource.isPresent()) {
                String sourceName = extractedSource.get();
                logger.info("Fonte extra√≠da do hist√≥rico: '{}'", sourceName);

                // Tenta a busca direta (regex) com a fonte extra√≠da (ex: "CFW 1.1")
                Optional<QueryServiceResult> directFollowUp = handleDirectReferenceQuery(sourceName);
                if (directFollowUp.isPresent()) {
                    logger.info("Respondendo ao acompanhamento com busca de refer√™ncia direta.");
                    return directFollowUp.get();
                } else {
                    // Se falhar, usa o nome da fonte como a query RAG
                    logger.warn("Busca direta falhou para '{}', usando busca RAG padr√£o.", sourceName);
                    ragQuery = sourceName; // Sobrescreve a query sem√¢ntica
                }
            } else {
                logger.warn("N√£o foi poss√≠vel extrair o nome da fonte {} do hist√≥rico.", sourceNum.get());
            }
        }
        // Ao final, 'ragQuery' √© ou a 'userQuestion' ou o nome da fonte extra√≠da.

        // --- 6. Busca H√≠brida (RAG) (MODIFICADA) ---
        // Passamos o 'ragQuery' (para busca sem√¢ntica) e o 'filter' (para busca estrutural)
        List<ContextItem> results = performHybridSearch(ragQuery, filter);

        // --- 7. Verifica√ß√£o de Resultados ---
        if (results.isEmpty()) {
            // üëá TIPO DE RETORNO ATUALIZADO
            return new QueryServiceResult(
                    "N√£o encontrei informa√ß√µes relevantes nas fontes catalogadas. " +
                            "Tente reformular sua pergunta ou ser mais espec√≠fico.",
                    Collections.emptyList()
            );
        }

        // --- 8. Log de Qualidade ---

        double avgScore = results.stream()
                .mapToDouble(ContextItem::similarityScore)
                .average()
                .orElse(0.0);

        if (avgScore < 0.6) {
            logger.warn("‚ö†Ô∏è Baixa relev√¢ncia m√©dia ({}) para: '{}' (Query RAG: '{}')",
                    String.format("%.2f", avgScore), userQuestion, ragQuery);
        }

        logger.info("üìä Construindo resposta com {} fontes (relev√¢ncia m√©dia: {})",
                results.size(), String.format("%.2f", avgScore));

        // --- 9. Constru√ß√£o do Prompt e Chamada da IA ---
        String prompt = buildOptimizedPrompt(userQuestion, results, chatHistory);
        String aiAnswer;
        try {
            aiAnswer = geminiApiClient.generateContent(prompt, chatHistory, userQuestion);
            if (aiAnswer == null || aiAnswer.trim().isEmpty()) {
                aiAnswer = "Desculpe, n√£o consegui gerar uma resposta. Tente novamente.";
            }
        } catch (Exception e) {
            logger.error("‚ùå Erro ao chamar a API do Gemini para a pergunta: '{}'. Erro: {}", userQuestion, e.getMessage(), e);
            aiAnswer = "Desculpe, ocorreu um erro ao tentar processar sua pergunta com a IA. Por favor, tente novamente mais tarde.";
            // üëá TIPO DE RETORNO ATUALIZADO
            return new QueryServiceResult(aiAnswer, Collections.emptyList());
        }

        // --- 10. P√ìS-PROCESSAMENTO PARA CRIAR REFER√äNCIAS ---
        List<SourceReference> references = new ArrayList<>();
        Map<String, Integer> sourceToNumberMap = new HashMap<>();
        int sourceCounter = 1;

        // Itera sobre os resultados da busca RAG para construir a lista de fontes
        for (ContextItem item : results) {
            String fullSource = item.source();
            if (!sourceToNumberMap.containsKey(fullSource)) {
                sourceToNumberMap.put(fullSource, sourceCounter++);
            }
            int sourceNumber = sourceToNumberMap.get(fullSource);

            // Adiciona a fonte √† lista (o front-end usar√° isso)
            references.add(new SourceReference(
                    sourceNumber,
                    fullSource,
                    item.content() // O TEXTO COMPLETO
            ));
        }

        // --- 11. Resposta e Cache ---
        // üëá TIPO DE RETORNO ATUALIZADO
        QueryServiceResult response = new QueryServiceResult(aiAnswer, references);

        if (responseCache.size() < MAX_CACHE_SIZE) {
            responseCache.put(cacheKey, response);
        }

        return response;
    }


    private boolean shouldUseKeywordSearch(String question, List<ContextItem> vectorResults) {
        // Ativar keyword search se:

        // 1. Resultados vetoriais fracos
        boolean hasWeakVectorResults = vectorResults.isEmpty() ||
                vectorResults.stream().allMatch(item -> item.similarityScore() < 0.7);

        // 2. NOVO: Pergunta explicitamente pede base b√≠blica
        boolean needsBiblicalFoundation = question.toLowerCase().matches(
                ".*(o que a b√≠blia|que diz a escritura|base b√≠blica|fundamenta√ß√£o|vers√≠culo|texto b√≠blico).*"
        );

        // 3. Pergunta cont√©m refer√™ncia b√≠blica espec√≠fica
        boolean hasBiblicalReference = question.matches(".*\\d+[:\\.]\\d+.*") ||
                question.toLowerCase().matches(".*(cap√≠tulo|vers√≠culo|verso|cap\\.|v\\.).*");

        // 4. NOVO: Pergunta sobre livros b√≠blicos espec√≠ficos
        boolean mentionsBiblicalBooks = question.toLowerCase().matches(
                ".*(g√™nesis|√™xodo|lev√≠tico|n√∫meros|deuteron√¥mio|josu√©|ju√≠zes|rute|samuel|reis|cr√¥nicas|" +
                        "esdras|neemias|ester|j√≥|salmos|prov√©rbios|eclesiastes|cantares|isa√≠as|jeremias|" +
                        "ezequiel|daniel|os√©ias|joel|am√≥s|obadias|jonas|miqu√©ias|naum|habacuque|sofonias|" +
                        "ageu|zacarias|malaquias|mateus|marcos|lucas|jo√£o|atos|romanos|cor√≠ntios|g√°latas|" +
                        "ef√©sios|filipenses|colossenses|tessalonicenses|tim√≥teo|tito|filemom|hebreus|tiago|" +
                        "pedro|apocalipse).*"
        );

        // 5. Pergunta cont√©m nomes espec√≠ficos de documentos
        boolean hasSpecificNames = question.toLowerCase().matches(
                ".*(westminster|calvino|catecismo|confiss√£o|institutas|genebra).*"
        );

        // 6. Pergunta muito curta (prov√°vel busca factual)
        boolean isShortQuery = question.split("\\s+").length <= 5;

        return hasWeakVectorResults || needsBiblicalFoundation || hasBiblicalReference ||
                mentionsBiblicalBooks || hasSpecificNames || isShortQuery;
    }

    private List<ContextItem> performKeywordSearch(String question) {
        Set<String> keywords = extractImportantKeywords(question);

        if (keywords.isEmpty()) {
            return Collections.emptyList();
        }

        List<ContextItem> results = new ArrayList<>();

        try {
            List<String> topKeywords = keywords.stream()
                    .filter(k -> k.length() > 3)
                    .filter(k -> !STOP_WORDS.contains(k))
                    .sorted(Comparator.comparingInt(String::length).reversed())
                    .limit(5)
                    .collect(Collectors.toList());

            if (topKeywords.isEmpty()) {
                logger.debug("Nenhuma keyword v√°lida encontrada");
                return Collections.emptyList();
            }

            logger.debug("üîç Buscando por {} keywords: {}", topKeywords.size(), topKeywords);

            Pageable limit3 = PageRequest.of(0, 3);
            Set<Long> processedChunkIds = new HashSet<>();
            Set<Long> processedNoteIds = new HashSet<>();

            for (String keyword : topKeywords) {
                try {
                    logger.debug("  ‚Üí Buscando por: '{}'", keyword);

                    // ‚úÖ NOVO: Try-catch individual para cada keyword
                    try {
                        List<ContentChunk> chunks = contentChunkRepository.searchByKeywords(keyword, limit3);
                        for (ContentChunk chunk : chunks) {
                            if (!processedChunkIds.contains(chunk.getId())) {
                                double score = calculateEnhancedKeywordScore(chunk.getContent(), keywords, keyword);
                                results.add(ContextItem.from(chunk, score));
                                processedChunkIds.add(chunk.getId());
                            }
                        }
                    } catch (Exception chunkError) {
                        logger.warn("  ‚ö†Ô∏è Erro ao buscar chunks para '{}': {}", keyword, chunkError.getMessage());
                    }

                    try {
                        List<StudyNote> notes = studyNoteRepository.searchByKeywords(keyword, limit3);
                        for (StudyNote note : notes) {
                            if (!processedNoteIds.contains(note.getId())) {
                                double score = calculateEnhancedKeywordScore(note.getNoteContent(), keywords, keyword);
                                results.add(ContextItem.from(note, score));
                                processedNoteIds.add(note.getId());
                            }
                        }
                    } catch (Exception noteError) {
                        logger.warn("  ‚ö†Ô∏è Erro ao buscar notas para '{}': {}", keyword, noteError.getMessage());
                    }

                } catch (Exception keywordError) {
                    logger.warn("  ‚ùå Erro geral para keyword '{}': {}", keyword, keywordError.getMessage());
                    continue; // Continua com pr√≥xima keyword
                }
            }

            logger.debug("‚úÖ Keyword search encontrou {} itens √∫nicos", results.size());

        } catch (Exception e) {
            logger.warn("‚ùå Erro na busca por keywords (usando apenas busca vetorial): {}", e.getMessage());
            // Retorna lista vazia - sistema continua s√≥ com busca vetorial
            return Collections.emptyList();
        }

        return results;
    }

    private Set<String> extractImportantKeywords(String question) {
        Set<String> keywords = new HashSet<>();
        String[] words = question.toLowerCase()
                .replaceAll("[?!.,;:]", "")
                .split("\\s+");

        // 1. Adicionar palavras principais
        for (String word : words) {
            // Pular stop words e palavras muito curtas
            if (word.length() > 2 && !STOP_WORDS.contains(word)) {
                keywords.add(word);

                // 2. Adicionar sin√¥nimos teol√≥gicos se aplic√°vel
                if (THEOLOGICAL_SYNONYMS.containsKey(word)) {
                    List<String> synonyms = THEOLOGICAL_SYNONYMS.get(word);
                    // Adicionar apenas os 3 sin√¥nimos mais importantes
                    keywords.addAll(synonyms.stream().limit(3).collect(Collectors.toList()));
                }
            }
        }

        // 3. Adicionar frases importantes
        addImportantPhrases(question.toLowerCase(), keywords);

        // 4. Priorizar termos teol√≥gicos espec√≠ficos
        prioritizeTheologicalTerms(keywords, question.toLowerCase());

        logger.debug("üî§ Keywords extra√≠das ({}): {}", keywords.size(),
                keywords.stream().limit(8).collect(Collectors.toList()));

        return keywords;
    }

    /**
     * D√° prioridade a termos teol√≥gicos importantes
     */
    private void prioritizeTheologicalTerms(Set<String> keywords, String question) {
        // Termos que sempre devem ser inclu√≠dos se aparecerem na pergunta
        String[] priorityTerms = {
                "deus", "cristo", "jesus", "esp√≠rito", "santo", "b√≠blia", "escritura",
                "salva√ß√£o", "gra√ßa", "f√©", "pecado", "justifica√ß√£o", "santifica√ß√£o",
                "elei√ß√£o", "predestina√ß√£o", "batismo", "ceia", "igreja", "ora√ß√£o"
        };

        for (String term : priorityTerms) {
            if (question.contains(term) && !keywords.contains(term)) {
                keywords.add(term);
            }
        }
    }

    private void addImportantPhrases(String question, Set<String> keywords) {
        // ===== FRASES IMPORTANTES =====
        Map<String, List<String>> importantPhrases = Map.ofEntries(
                Map.entry("esp√≠rito santo", List.of("esp√≠rito", "santo")),
                Map.entry("jesus cristo", List.of("jesus", "cristo")),
                Map.entry("palavra de deus", List.of("palavra", "deus")),
                Map.entry("reino de deus", List.of("reino", "deus")),
                Map.entry("filho de deus", List.of("filho", "deus")),
                Map.entry("corpo de cristo", List.of("corpo", "cristo")),
                Map.entry("novo testamento", List.of("novo", "testamento")),
                Map.entry("antigo testamento", List.of("antigo", "testamento")),
                Map.entry("sola scriptura", List.of("sola", "scriptura", "escritura")),
                Map.entry("sola fide", List.of("sola", "fide", "f√©"))
        );

        String questionLower = question.toLowerCase();
        for (Map.Entry<String, List<String>> entry : importantPhrases.entrySet()) {
            if (questionLower.contains(entry.getKey())) {
                keywords.addAll(entry.getValue());
            }
        }
    }

    private double calculateKeywordScore(String content, Set<String> keywords) {
        if (content == null || content.isEmpty()) {
            return 0.0;
        }

        String contentLower = content.toLowerCase();
        long matchCount = keywords.stream()
                .filter(contentLower::contains)
                .count();

        // Score entre 0 e 1 baseado na propor√ß√£o de keywords encontradas
        return (double) matchCount / keywords.size();
    }

    // ===== OTIMIZA√á√ÉO 2: RERANKING INTELIGENTE =====
    private List<ContextItem> combineAndRerankResults(
            List<ContextItem> vectorResults,
            List<ContextItem> keywordResults,
            String userQuestion) {

        Map<String, ContextItem> combined = new HashMap<>();

        // Adicionar resultados vetoriais com peso 0.7
        for (ContextItem item : vectorResults) {
            String key = generateItemKey(item);
            double adjustedScore = item.similarityScore() * 0.7;
            combined.put(key, item.withAdjustedScore(adjustedScore));
        }

        // Adicionar/mesclar resultados de keyword com peso 0.3
        for (ContextItem item : keywordResults) {
            String key = generateItemKey(item);
            if (combined.containsKey(key)) {
                ContextItem existing = combined.get(key);
                double newScore = existing.similarityScore() + (item.similarityScore() * 0.3);
                combined.put(key, existing.withAdjustedScore(newScore));
            } else {
                double adjustedScore = item.similarityScore() * 0.3;
                combined.put(key, item.withAdjustedScore(adjustedScore));
            }
        }

        // Aplicar boost por fonte e outros crit√©rios
        List<ContextItem> reranked = combined.values().stream()
                .map(item -> applySmartBoosts(item, userQuestion))
                .sorted(Comparator.comparing(ContextItem::similarityScore).reversed())
                .limit(5)
                .collect(Collectors.toList());

        logRerankedResults(reranked);
        return reranked;
    }

    private String generateItemKey(ContextItem item) {
        // Gerar chave √∫nica para detectar duplicatas
        return item.source() + "_" + item.content().substring(0, Math.min(50, item.content().length()));
    }

    private ContextItem applySmartBoosts(ContextItem item, String question) {
        // üëá LOG DO SCORE ORIGINAL üëá
        logger.debug("  Boosting item: '{}' (Score Original: {})",
                item.source(),
                String.format("%.3f", item.similarityScore()));

        double finalScore = item.similarityScore(); // Come√ßa com o score original
        double additiveBoost = 0.0; // Usaremos adi√ß√£o para boosts secund√°rios

        String source = item.source().toLowerCase();
        String questionLower = question.toLowerCase();
        String content = item.content().toLowerCase();

        // --- Boosts Principais (Multiplicativos, mas com cuidado) ---

        // SUPER-BOOST para documento citado diretamente (MANT√âM MULTIPLICATIVO ALTO)
        if ((questionLower.contains("catecismo") && source.contains("catecismo")) ||
                (questionLower.contains("confiss√£o") && source.contains("confiss√£o de f√©")) ||
                (questionLower.contains("institutas") && source.contains("institutas")) ||
                ((questionLower.contains("teologia sistem√°tica") || questionLower.contains("berkhof")) && source.contains("teologia sistem√°tica"))) {
            finalScore *= 1.5; // Reduzido de 2.0 para 1.5 (Boost de 50%)
            logger.debug("    -> SUPER BOOST aplicado");
        }
        // BOOST PRIORIT√ÅRIO para ESCRITURA (MANT√âM MULTIPLICATIVO)
        else if (source.contains("b√≠blia de genebra")) {
            finalScore *= 1.2; // Reduzido de 1.4 para 1.2 (Boost de 20%)
            logger.debug("    -> BOOST B√≠blia aplicado");

            // Boost ADITIVO se cont√©m refer√™ncia
            if (content.matches(".*\\d+[:\\.]\\d+.*")) {
                additiveBoost += 0.1; // Adiciona 0.1
                logger.debug("    -> ADD Boost Ref. Direta");
            }
            // Boost ADITIVO se pergunta doutrin√°ria
            if (isDoctrinalQuestion(questionLower)) {
                additiveBoost += 0.05; // Adiciona 0.05
                logger.debug("    -> ADD Boost Doutrina");
            }
        }
        // Boosts MULTIPLICATIVOS MENORES para documentos confessionais importantes
        else if (source.contains("confiss√£o de f√©")) {
            finalScore *= 1.1; // Boost de 10%
            logger.debug("    -> BOOST Confiss√£o aplicado");
        } else if (source.contains("catecismo maior")) {
            finalScore *= 1.08; // Boost de 8%
            logger.debug("    -> BOOST C. Maior aplicado");
        } else if (source.contains("breve catecismo")) {
            finalScore *= 1.06; // Boost de 6%
            logger.debug("    -> BOOST C. Breve aplicado");
        } else if (source.contains("institutas") || source.contains("teologia sistem√°tica")) {
            finalScore *= 1.05; // Boost de 5% (j√° coberto pelo SUPER BOOST se citado)
            logger.debug("    -> BOOST Institutas/TS aplicado");
        }

        // --- Boosts Secund√°rios (ADITIVOS) ---

        // Boost ADITIVO se tem estrutura pergunta/resposta
        if (item.question() != null && !item.question().isEmpty()) {
            additiveBoost += 0.03; // Adiciona 0.03
            logger.debug("    -> ADD Boost P/R");
            // Boost ADITIVO extra se a pergunta bate
            if (calculateSimilarity(item.question().toLowerCase(), questionLower) > 0.7) {
                additiveBoost += 0.07; // Adiciona +0.07 (Total 0.1)
                logger.debug("    -> ADD Boost P/R Match");
            }
        }

        // Boost ADITIVO para conte√∫do que cita refer√™ncias b√≠blicas
        int biblicalReferences = countBiblicalReferences(item.content());
        if (biblicalReferences > 1) { // A partir de 2 refs
            additiveBoost += Math.min(biblicalReferences * 0.02, 0.1); // Adiciona 0.02 por ref, max 0.1
            logger.debug("    -> ADD Boost Refs B√≠blicas ({})", biblicalReferences);
        }

        // --- Penalidade (Multiplicativa) ---
        if (item.content().length() < 100) {
            finalScore *= 0.9; // Penalidade de 10%
            logger.debug("    -> PENALTY Conte√∫do Curto");
        }

        // --- Aplica Boost Aditivo e Garante Limites ---
        finalScore += additiveBoost;
        finalScore = Math.min(finalScore, 1.5); // COLOCA UM TETO M√ÅXIMO (ex: 1.5)
        finalScore = Math.max(finalScore, 0.0); // Garante que n√£o seja negativo

        logger.debug("    -> Score Final: {}", String.format("%.3f", finalScore));

        return item.withAdjustedScore(finalScore);
    }

    // ===== NOVOS M√âTODOS AUXILIARES =====
    private boolean isDoctrinalQuestion(String question) {
        // Detectar perguntas que precisam de fundamenta√ß√£o b√≠blica s√≥lida
        String[] doctrinalKeywords = {
                "doutrina", "ensina", "b√≠blia", "escritura", "palavra", "deus",
                "salva√ß√£o", "pecado", "gra√ßa", "f√©", "justifica√ß√£o", "santifica√ß√£o",
                "elei√ß√£o", "predestina√ß√£o", "trindade", "cristo", "esp√≠rito",
                "igreja", "sacramento", "batismo", "ceia", "ora√ß√£o", "lei"
        };

        return Arrays.stream(doctrinalKeywords)
                .anyMatch(question::contains);
    }

    private int countBiblicalReferences(String content) {
        // Contar refer√™ncias b√≠blicas no formato "Livro X:Y" ou "X:Y"
        String pattern = "\\b\\d+[:\\.]\\d+(-\\d+)?\\b";
        return (int) content.split(pattern).length - 1;
    }

    private double calculateSimilarity(String text1, String text2) {
        // Similaridade simples baseada em palavras comuns
        Set<String> words1 = new HashSet<>(Arrays.asList(text1.split("\\s+")));
        Set<String> words2 = new HashSet<>(Arrays.asList(text2.split("\\s+")));

        Set<String> intersection = new HashSet<>(words1);
        intersection.retainAll(words2);

        Set<String> union = new HashSet<>(words1);
        union.addAll(words2);

        return union.isEmpty() ? 0.0 : (double) intersection.size() / union.size();
    }

    private void logRerankedResults(List<ContextItem> results) {
        logger.info("üìä Top {} resultados ap√≥s reranking:", results.size());

        // Contar por tipo de fonte
        long biblicalNotes = results.stream().filter(ContextItem::isBiblicalNote).count();
        long confessional = results.stream().filter(item -> !item.isBiblicalNote()).count();

        logger.info("  üìñ Fontes b√≠blicas: {}, ‚õ™ Fontes confessionais: {}", biblicalNotes, confessional);

        // Mostrar top 3 com mais detalhes
        for (int i = 0; i < Math.min(3, results.size()); i++) {
            ContextItem item = results.get(i);
            String type = item.isBiblicalNote() ? "üìñ" : "‚õ™";
            logger.info("  {}. {} [Score: {}] {}",
                    i + 1, type, String.format("%.3f", item.similarityScore()), item.source());
        }

        // Log da qualidade geral
        double avgScore = results.stream()
                .mapToDouble(ContextItem::similarityScore)
                .average()
                .orElse(0.0);

        String qualityEmoji = avgScore > 0.8 ? "üî•" : avgScore > 0.6 ? "‚úÖ" : "‚ö†Ô∏è";
        logger.info("  {} Qualidade m√©dia: {}%", qualityEmoji, String.format("%.1f", avgScore * 100));
    }

    // ===== BUSCA VETORIAL OTIMIZADA =====
    private List<ContextItem> performVectorSearch(String userQuestion, MetadataFilter filter) {
        // Usar cache de embeddings
        PGvector questionVector = getOrComputeEmbedding(userQuestion);

        if (questionVector == null) {
            logger.warn("‚ö†Ô∏è N√£o foi poss√≠vel gerar embedding para a pergunta");
            return Collections.emptyList();
        }

        // Buscar mais resultados inicialmente para melhor reranking
        // APLICANDO FILTROS:
        List<Object[]> rawChunkResults = contentChunkRepository.findSimilarChunksRaw(
                questionVector.toString(),
                5,
                filter.obraAcronimo(),      // NOVO (pode ser null)
                filter.capitulo(),        // NOVO (pode ser null)
                filter.secaoOuVersiculo() // NOVO (pode ser null)
        );
        List<ContextItem> chunkItems = convertRawChunkResultsToContextItems(rawChunkResults);

        // APLICANDO FILTROS:
        List<Object[]> rawNoteResults = studyNoteRepository.findSimilarNotesRaw(
                questionVector.toString(),
                5,
                filter.livroBiblico(),    // NOVO (pode ser null)
                filter.capitulo(),        // NOVO (pode ser null)
                filter.secaoOuVersiculo() // NOVO (pode ser null)
        );
        List<ContextItem> noteItems = convertRawNoteResultsToContextItems(rawNoteResults);

        // Combinar e retornar todos (o reranking ser√° feito depois)
        List<ContextItem> combinedItems = new ArrayList<>();
        combinedItems.addAll(chunkItems);
        combinedItems.addAll(noteItems);

        return combinedItems;
    }

    private List<ContextItem> convertRawNoteResultsToContextItems(List<Object[]> rawResults) {
        List<ContextItem> items = new ArrayList<>();
        for (Object[] row : rawResults) {
            try {
                StudyNote note = new StudyNote();
                note.setId(((Number) row[0]).longValue());
                note.setBook((String) row[1]);
                note.setStartChapter(((Number) row[2]).intValue());
                note.setStartVerse(((Number) row[3]).intValue());
                note.setEndChapter(((Number) row[4]).intValue());
                note.setEndVerse(((Number) row[5]).intValue());
                note.setNoteContent((String) row[6]);

                double score = ((Number) row[7]).doubleValue();

                // Aqui chamamos o m√©todo 'from' espec√≠fico para StudyNote, que tamb√©m vamos criar.
                items.add(ContextItem.from(note, score));
            } catch (Exception e) {
                logger.warn("Erro ao converter resultado raw de note: {}", e.getMessage(), e);
            }
        }
        return items;
    }

    // ===== CACHE DE EMBEDDINGS =====
    private PGvector getOrComputeEmbedding(String text) {
        // Limitar o texto para a chave do cache
        String cacheKey = text.length() > 200 ? text.substring(0, 200) : text;

        PGvector cached = embeddingCache.get(cacheKey);
        if (cached != null) {
            logger.debug("‚úÖ Embedding encontrado no cache");
            return cached;
        }

        PGvector computed = geminiApiClient.generateEmbedding(text);

        // Adicionar ao cache se houver espa√ßo
        if (computed != null && embeddingCache.size() < MAX_EMBEDDING_CACHE_SIZE) {
            embeddingCache.put(cacheKey, computed);
        }

        return computed;
    }

    // ===== NORMALIZA√á√ÉO PARA CACHE =====
    private String normalizeQuestion(String question) {
        return question.toLowerCase()
                .replaceAll("\\s+", " ")
                .replaceAll("[?!.,;:]", "")
                .trim();
    }

    private String buildOptimizedPrompt(String question, List<ContextItem> items, List<Mensagem> chatHistory) {
        StringBuilder context = new StringBuilder();
        StringBuilder sourceMapping = new StringBuilder(); // Este ser√° o nosso "mapa de rodap√©"

        // Mapa para rastrear fontes √∫nicas e atribuir um n√∫mero a elas
        Map<String, Integer> sourceToNumberMap = new HashMap<>();
        int sourceCounter = 1;

        context.append("FONTES DISPON√çVEIS PARA CONSULTA:\n\n");

        // 1. Constr√≥i o contexto e o mapa de fontes
        for (ContextItem item : items) {
            String fullSource = item.source(); // A FONTE INTACTA

            // Verifica se j√° vimos esta fonte
            if (!sourceToNumberMap.containsKey(fullSource)) {
                sourceToNumberMap.put(fullSource, sourceCounter);
                sourceCounter++;
            }

            int sourceNumber = sourceToNumberMap.get(fullSource);
            String sourceId = String.format("[%d]", sourceNumber); // [1], [2], etc.

            // Adiciona ao contexto que a IA vai ler
            context.append(String.format("%s\n", sourceId)); // [1]
            if (item.question() != null && !item.question().isEmpty()) {
                context.append("    Pergunta Relacionada: ").append(item.question()).append("\n");
            }
            context.append("    Conte√∫do: ").append(limitContent(item.content(), 450)).append("\n\n");
        }

        // 2. Constr√≥i o mapa de refer√™ncia para o prompt
        sourceMapping.append("MAPA DE FONTES (Use isto para o rodap√©):\n");
        for (Map.Entry<String, Integer> entry : sourceToNumberMap.entrySet()) {
            // Ex: [1]: B√≠blia de Genebra - Romanos 8:29
            sourceMapping.append(String.format("[%d]: %s\n", entry.getValue(), entry.getKey()));
        }

        // 3. Constr√≥i o prompt final
        return String.format("""
                Voc√™ √© um assistente de pesquisa teol√≥gica focado na Tradi√ß√£o Reformada (Calvinista). Sua fun√ß√£o √© ajudar os usu√°rios a encontrar informa√ß√µes **detalhadas e precisas** baseadas em fontes confi√°veis.
                
                **TAREFA:** Responda a PERGUNTA DO USU√ÅRIO de forma clara, **completa**, objetiva e prestativa, baseando-se **ESTRITAMENTE** nas FONTES DISPON√çVEIS PARA CONSULTA fornecidas ([1], [2], etc.).
                
                **PRINC√çPIOS OBRIGAT√ìRIOS:**
                1.  **Fidelidade Absoluta √†s Fontes:** Sua resposta deve refletir **APENAS** o que est√° escrito nas fontes. N√£o adicione interpreta√ß√µes ou informa√ß√µes externas.
                2.  **Prioridade da Escritura:** Se as fontes b√≠blicas estiverem dispon√≠veis, comece a resposta com a informa√ß√£o delas.
                3.  **Clareza e Profundidade:** Seja direto, use linguagem acess√≠vel, mas **n√£o simplifique excessivamente**.
                
                **REGRAS E RESTRI√á√ïES ESTRITAS:**
                * **N√ÉO use conhecimento externo.**
                * **N√ÉO d√™ opini√µes pessoais.**
                * **N√ÉO seja vago.** Use os detalhes espec√≠ficos das fontes.
                * **N√ÉO use um tom professoral.** Seja um assistente prestativo e informativo.
                
                **INSTRU√á√ïES DE ESTILO E CITA√á√ÉO (FORMATO DE NOTAS DE RODAP√â):**
                * **Tom:** Prestativo, informativo e preciso. Organize a resposta em par√°grafos l√≥gicos.
                * **Cita√ß√£o no Texto:** Ao apresentar uma informa√ß√£o **chave** extra√≠da de uma fonte, adicione um **n√∫mero sobrescrito** (superscript) no final da frase ou trecho, come√ßando com ¬π, depois ¬≤, ¬≥ (ex: "A justifica√ß√£o √© um ato da livre gra√ßa de Deus¬π.").
                * **Mapeamento:** O n√∫mero sobrescrito (ex: ¬π) DEVE CORRESPONDER ao n√∫mero da fonte no bloco "FONTES DISPON√çVEIS" (ex: [1]).
                * **Reutiliza√ß√£o de Fontes:** Se voc√™ usar a mesma fonte (ex: [1]) v√°rias vezes, **use o mesmo n√∫mero sobrescrito** (ex: ¬π) todas as vezes.
                * **Se√ß√£o "Fontes Consultadas":** Ao final da sua resposta principal, adicione uma se√ß√£o `---` e depois `### Fontes Consultadas`. Nesta se√ß√£o, liste **cada n√∫mero sobrescrito** usado no texto, seguido pela **FONTE INTACTA (COMPLETA)**, que voc√™ deve extrair do "MAPA DE FONTES".
                    * Exemplo de Rodap√©:
                        ```
                        ---
                        ### Fontes Consultadas
                        ¬π B√≠blia de Genebra - Romanos 8:29
                        ¬≤ Teologia Sistem√°tica - D. As Partes da Predestina√ß√£o.
                        ```
                
                **SE O CONTEXTO FOR INSUFICIENTE:**
                * Se as fontes ([1], [2]...) n√£o responderem **diretamente**, informe isso claramente. Diga: "As fontes consultadas n√£o fornecem uma resposta direta sobre [t√≥pico]." Se elas abordarem um t√≥pico *relacionado*, mencione-o brevemente, **citando as fontes com n√∫meros sobrescritos** e listando-as no rodap√©.
                
                ---
                FONTES DISPON√çVEIS PARA CONSULTA:
                %s
                ---
                %s
                ---
                
                **PERGUNTA DO USU√ÅRIOS:**
                %s
                
                **RESPOSTA:**
                (Elabore sua resposta. Adicione n√∫meros sobrescritos ¬π, ¬≤, ¬≥... ap√≥s as informa√ß√µes chave. No final, crie a se√ß√£o "Fontes Consultadas" listando cada n√∫mero e sua FONTE INTACTA correspondente do "MAPA DE FONTES".)
                """, context.toString(), sourceMapping.toString(), question);
    }

    private String limitContent(String content, int maxLength) {
        if (content.length() <= maxLength) {
            return content;
        }
        return content.substring(0, maxLength) + "...";
    }

    // ===== M√âTODOS AUXILIARES EXISTENTES =====


    private List<ContextItem> convertRawChunkResultsToContextItems(List<Object[]> rawResults) {
        List<ContextItem> items = new ArrayList<>();
        for (Object[] row : rawResults) {
            try {
                Work work = workRepository.findById(((Number) row[7]).longValue()).orElse(null);
                if (work == null) continue;

                ContentChunk chunk = new ContentChunk();
                chunk.setId(((Number) row[0]).longValue());
                chunk.setContent((String) row[1]);
                chunk.setQuestion((String) row[2]);
                chunk.setSectionTitle((String) row[3]);
                chunk.setChapterTitle((String) row[4]);
                chunk.setChapterNumber(row[5] != null ? ((Number) row[5]).intValue() : null);
                chunk.setSectionNumber(row[6] != null ? ((Number) row[6]).intValue() : null);
                chunk.setWork(work);

                // üëá CORRE√á√ÉO DOS √çNDICES AQUI üëá
                // Agora que a query foi corrigida, os √≠ndices mudaram:
                chunk.setSubsectionTitle((String) row[8]);      // subsection_title est√° no √≠ndice 8
                chunk.setSubSubsectionTitle((String) row[9]);   // sub_subsection_title est√° no √≠ndice 9

                // O score agora est√° no final, no √≠ndice 10
                double score = ((Number) row[10]).doubleValue();

                String contextualSource = buildContextualSource(chunk);

                items.add(ContextItem.from(chunk, score, contextualSource));

            } catch (Exception e) {
                logger.warn("Erro ao converter resultado raw de chunk: {}", e.getMessage(), e);
            }
        }
        return items;
    }

    private String buildContextualSource(ContentChunk chunk) {
        // Usa um StringBuilder para efici√™ncia
        StringBuilder path = new StringBuilder();

        if (chunk.getChapterTitle() != null && !chunk.getChapterTitle().isEmpty()) {
            path.append(chunk.getChapterTitle());
        }
        if (chunk.getSectionTitle() != null && !chunk.getSectionTitle().isEmpty()) {
            if (!path.isEmpty()) path.append(" > ");
            path.append(chunk.getSectionTitle());
        }
        if (chunk.getSubsectionTitle() != null && !chunk.getSubsectionTitle().isEmpty()) {
            if (!path.isEmpty()) path.append(" > ");
            path.append(chunk.getSubsectionTitle());
        }
        if (chunk.getSubSubsectionTitle() != null && !chunk.getSubSubsectionTitle().isEmpty()) {
            if (!path.isEmpty()) path.append(" > ");
            path.append(chunk.getSubSubsectionTitle());
        }

        // Se por algum motivo nenhum t√≠tulo foi encontrado, retorna apenas o nome da obra
        if (path.isEmpty()) {
            return chunk.getWork().getTitle();
        }

        // Retorna o nome da obra + o caminho constru√≠do
        return chunk.getWork().getTitle() + " - " + path.toString();
    }

    // ===== M√âTODO PARA LIMPAR CACHE (√∫til para admin) =====
    public void clearCache() {
        responseCache.clear();
        embeddingCache.clear();
        logger.info("üßπ Cache limpo manualmente");
    }

    public Map<String, Integer> getCacheStats() {
        Map<String, Integer> stats = new HashMap<>();
        stats.put("responseCacheSize", responseCache.size());
        stats.put("embeddingCacheSize", embeddingCache.size());
        return stats;
    }

    private double calculateEnhancedKeywordScore(String content, Set<String> allKeywords, String triggerKeyword) {
        if (content == null || content.isEmpty()) {
            return 0.0;
        }

        String contentLower = content.toLowerCase();

        // 1. Contar matches √∫nicos
        long uniqueMatches = allKeywords.stream()
                .filter(contentLower::contains)
                .count();

        // 2. Score base (propor√ß√£o de keywords encontradas)
        double baseScore = (double) uniqueMatches / allKeywords.size();

        // 3. Boost para densidade de keywords
        long totalMatches = allKeywords.stream()
                .mapToLong(keyword -> countOccurrences(contentLower, keyword.toLowerCase()))
                .sum();

        double densityBoost = 1.0 + (totalMatches * 0.05); // 5% boost por ocorr√™ncia extra
        densityBoost = Math.min(densityBoost, 2.0); // M√°ximo 2x boost

        // 4. Score final
        double finalScore = baseScore * densityBoost;

        return Math.min(finalScore, 1.0); // M√°ximo 1.0
    }

    /**
     * Conta quantas vezes uma palavra aparece no texto
     */
    private long countOccurrences(String text, String word) {
        if (text == null || word == null || word.isEmpty()) {
            return 0;
        }

        int count = 0;
        int index = 0;

        while ((index = text.indexOf(word, index)) != -1) {
            count++;
            index += word.length();
        }

        return count;
    }

    // ===== NOVO: HYBRID SEARCH COM FTS =====
    private List<ContextItem> performHybridSearch(String userQuestion, MetadataFilter filter) {
        // 1. Busca vetorial (peso 60%) - AGORA PASSA O FILTRO
        List<ContextItem> vectorResults = performVectorSearch(userQuestion, filter);

        // 2. Busca FTS (peso 40%) - AGORA PASSA O FILTRO
        List<ContextItem> ftsResults = performKeywordSearchFTS(userQuestion, filter);

        // 3. ‚úÖ DESABILITAR JPQL (est√° com erro PostgreSQL)
        List<ContextItem> jpqlResults = Collections.emptyList();

        // 4. Combinar Vector + FTS (perfeito!)
        return combineTwoResults(vectorResults, ftsResults, userQuestion);
    }

    /**
     * Garante que a lista final de contextos tenha uma mistura saud√°vel de fontes
     * b√≠blicas e confessionais, evitando que o boosting excessivo elimine
     * documentos importantes.
     *
     * @param allRankedResults Lista de todos os resultados, j√° com boosts aplicados e ordenada.
     * @return Uma lista final com no m√°ximo 5 itens, balanceada.
     */
    private List<ContextItem> ensureBalancedSources(List<ContextItem> allRankedResults) {
        // 1. Separar os resultados por tipo
        List<ContextItem> biblicalSources = allRankedResults.stream()
                .filter(item -> item.source().contains("B√≠blia de Genebra"))
                .collect(Collectors.toList());

        List<ContextItem> confessionalSources = allRankedResults.stream()
                .filter(item -> !item.source().contains("B√≠blia de Genebra"))
                .collect(Collectors.toList());

        // 2. Montar a lista final balanceada
        // Estrat√©gia: 3 fontes b√≠blicas + 2 confessionais (se dispon√≠veis)
        List<ContextItem> balancedList = new ArrayList<>();
        Set<String> addedKeys = new HashSet<>(); // Para evitar duplicatas

        // Adicionar as 3 melhores fontes b√≠blicas
        for (int i = 0; i < Math.min(3, biblicalSources.size()); i++) {
            ContextItem item = biblicalSources.get(i);
            String key = generateItemKey(item);
            if (!addedKeys.contains(key)) {
                balancedList.add(item);
                addedKeys.add(key);
            }
        }

        // Adicionar as 2 melhores fontes confessionais
        for (int i = 0; i < Math.min(2, confessionalSources.size()); i++) {
            ContextItem item = confessionalSources.get(i);
            String key = generateItemKey(item);
            if (!addedKeys.contains(key)) {
                balancedList.add(item);
                addedKeys.add(key);
            }
        }

        // 3. Reordenar a lista final pelo score para manter a relev√¢ncia
        balancedList.sort(Comparator.comparing(ContextItem::similarityScore).reversed());

        logger.info("‚öñÔ∏è Fontes balanceadas: {} B√≠blicas, {} Confessionais.",
                (int) balancedList.stream().filter(i -> i.source().contains("B√≠blia de Genebra")).count(),
                (int) balancedList.stream().filter(i -> !i.source().contains("B√≠blia de Genebra")).count());

        return balancedList;
    }

    // ‚úÖ M√©todo simplificado para 2 tipos de busca
    private List<ContextItem> combineTwoResults(
            List<ContextItem> vectorResults,
            List<ContextItem> ftsResults,
            String userQuestion) {
        Map<String, ContextItem> combined = new HashMap<>();
        // Vector: peso 0.6
        for (ContextItem item : vectorResults) {
            String key = generateItemKey(item);
            combined.put(key, item.withAdjustedScore(item.similarityScore() * 0.6));
        }
        // FTS: peso 0.4
        for (ContextItem item : ftsResults) {
            String key = generateItemKey(item);
            if (combined.containsKey(key)) {
                ContextItem existing = combined.get(key);
                combined.put(key, existing.withAdjustedScore(
                        existing.similarityScore() + (item.similarityScore() * 0.4)
                ));
            } else {
                combined.put(key, item.withAdjustedScore(item.similarityScore() * 0.4));
            }
        }

        // Aplicar boosts Sola Scriptura
        List<ContextItem> allRankedResults = combined.values().stream()
                .map(item -> applySmartBoosts(item, userQuestion))
                .sorted(Comparator.comparing(ContextItem::similarityScore).reversed())
                .collect(Collectors.toList());

        // ===== NOVA L√ìGICA DE SELE√á√ÉO BALANCEADA =====
        List<ContextItem> finalResults = ensureBalancedSources(allRankedResults);

        // Log otimizado
        logger.info("üîç Resultados da busca h√≠brida:");
        logger.info("  üß† Vector: {} resultados", vectorResults.size());
        logger.info("  üî§ FTS: {} resultados", ftsResults.size());
        logger.info("  üéØ Final (Balanceado): {} resultados √∫nicos", finalResults.size());
        logger.info("--- [DEBUG] Verificando Fontes Finais ---");
        for (ContextItem item : finalResults) {
            logger.info("  -> Fonte: {}, Score: {}",
                    item.source(),
                    String.format("%.3f", item.similarityScore())
            );
        }
        logger.info("-----------------------------------------");
// ========================================================================

        return finalResults;
    }

    // ===== M√âTODOS AUXILIARES =====
    private boolean isTheologicalTerm(String term) {
        String[] theologicalTerms = {
                "deus", "cristo", "jesus", "esp√≠rito", "santo", "salva√ß√£o", "gra√ßa", "f√©",
                "pecado", "justifica√ß√£o", "santifica√ß√£o", "elei√ß√£o", "predestina√ß√£o",
                "batismo", "ceia", "igreja", "ora√ß√£o", "b√≠blia", "escritura", "trindade",
                "reden√ß√£o", "regenera√ß√£o", "convers√£o", "arrependimento", "perd√£o"
        };

        return Arrays.stream(theologicalTerms).anyMatch(t -> t.equals(term.toLowerCase()));
    }

    private boolean isBiblicalBook(String term) {
        String[] books = {
                "g√™nesis", "√™xodo", "lev√≠tico", "n√∫meros", "deuteron√¥mio", "josu√©", "ju√≠zes", "rute",
                "samuel", "reis", "cr√¥nicas", "esdras", "neemias", "ester", "j√≥", "salmos", "prov√©rbios",
                "eclesiastes", "cantares", "isa√≠as", "jeremias", "ezequiel", "daniel", "os√©ias", "joel",
                "am√≥s", "obadias", "jonas", "miqu√©ias", "naum", "habacuque", "sofonias",
                "ageu", "zacarias", "malaquias", "mateus", "marcos", "lucas", "jo√£o", "atos", "romanos",
                "cor√≠ntios", "g√°latas", "ef√©sios", "filipenses", "colossenses", "tessalonicenses",
                "tim√≥teo", "tito", "filemom", "hebreus", "tiago", "pedro", "apocalipse"
        };
        return Arrays.stream(books).anyMatch(b -> term.toLowerCase().contains(b));
    }

    // ===== CONVERSORES FTS =====
    private List<ContextItem> convertFTSChunkResults(List<Object[]> results, Set<String> originalKeywords) {
        List<ContextItem> items = new ArrayList<>();

        for (Object[] row : results) {
            try {
                // Mapear campos da query FTS
                ContentChunk chunk = new ContentChunk();
                chunk.setId(((Number) row[0]).longValue());
                chunk.setContent((String) row[1]);
                chunk.setQuestion((String) row[2]);
                chunk.setSectionTitle((String) row[3]);
                chunk.setChapterTitle((String) row[4]);
                chunk.setChapterNumber(row[5] != null ? ((Number) row[5]).intValue() : null);
                chunk.setSectionNumber(row[6] != null ? ((Number) row[6]).intValue() : null);

                // Buscar Work por ID
                Long workId = ((Number) row[7]).longValue();
                Work work = workRepository.findById(workId).orElse(null);
                chunk.setWork(work);

                // Usar FTS rank como score base
                double ftsRank = ((Number) row[8]).doubleValue();

                // Combinar com nosso score de keywords
                double keywordScore = calculateEnhancedKeywordScore(chunk.getContent(), originalKeywords, "");

                // Score final: 70% FTS + 30% keyword
                double finalScore = (ftsRank * 0.7) + (keywordScore * 0.3);

                items.add(ContextItem.from(chunk, finalScore));

                logger.debug("  üìÑ Chunk {}: FTS={}, Keyword={}, Final={}",
                        chunk.getId(),
                        String.format("%.3f", ftsRank),
                        String.format("%.3f", keywordScore),
                        String.format("%.3f", finalScore)
                );

            } catch (Exception e) {
                logger.warn("‚ùå Erro ao converter resultado FTS chunk: {}", e.getMessage());
            }
        }

        return items;
    }

    private List<ContextItem> convertFTSNoteResults(List<Object[]> results, Set<String> originalKeywords) {
        List<ContextItem> items = new ArrayList<>();

        for (Object[] row : results) {
            try {
                StudyNote note = new StudyNote();
                note.setId(((Number) row[0]).longValue());
                note.setBook((String) row[1]);
                note.setStartChapter(((Number) row[2]).intValue());
                note.setStartVerse(((Number) row[3]).intValue());
                note.setEndChapter(((Number) row[4]).intValue());
                note.setEndVerse(((Number) row[5]).intValue());
                note.setNoteContent((String) row[6]);

                // FTS rank
                double ftsRank = ((Number) row[7]).doubleValue();
                double keywordScore = calculateEnhancedKeywordScore(note.getNoteContent(), originalKeywords, "");
                double finalScore = (ftsRank * 0.7) + (keywordScore * 0.3);

                items.add(ContextItem.from(note, finalScore));

                logger.debug("  üìñ Nota {}: FTS={}, Keyword={}, Final={}",
                        note.getId(),
                        String.format("%.3f", ftsRank),
                        String.format("%.3f", keywordScore),
                        String.format("%.3f", finalScore)
                );

            } catch (Exception e) {
                logger.warn("‚ùå Erro ao converter resultado FTS note: {}", e.getMessage());
            }
        }

        return items;
    }

    // ===== COMBINADOR TRIPLO =====
    private List<ContextItem> combineTripleResults(
            List<ContextItem> vectorResults,
            List<ContextItem> ftsResults,
            List<ContextItem> jpqlResults,
            String userQuestion) {

        Map<String, ContextItem> combined = new HashMap<>();

        // Vector: peso 0.5
        for (ContextItem item : vectorResults) {
            String key = generateItemKey(item);
            combined.put(key, item.withAdjustedScore(item.similarityScore() * 0.5));
        }

        // FTS: peso 0.35
        for (ContextItem item : ftsResults) {
            String key = generateItemKey(item);
            if (combined.containsKey(key)) {
                ContextItem existing = combined.get(key);
                combined.put(key, existing.withAdjustedScore(
                        existing.similarityScore() + (item.similarityScore() * 0.35)
                ));
            } else {
                combined.put(key, item.withAdjustedScore(item.similarityScore() * 0.35));
            }
        }

        // JPQL: peso 0.15
        for (ContextItem item : jpqlResults) {
            String key = generateItemKey(item);
            if (combined.containsKey(key)) {
                ContextItem existing = combined.get(key);
                combined.put(key, existing.withAdjustedScore(
                        existing.similarityScore() + (item.similarityScore() * 0.15)
                ));
            } else {
                combined.put(key, item.withAdjustedScore(item.similarityScore() * 0.15));
            }
        }

        // Aplicar boosts e retornar top 5
        List<ContextItem> finalResults = combined.values().stream()
                .map(item -> applySmartBoosts(item, userQuestion))
                .sorted(Comparator.comparing(ContextItem::similarityScore).reversed())
                .limit(5)
                .collect(Collectors.toList());

        // Log detalhado
        logTripleSearchResults(vectorResults, ftsResults, jpqlResults, finalResults);

        return finalResults;
    }

    // ===== LOGGING MELHORADO =====
    private void logTripleSearchResults(
            List<ContextItem> vectorResults,
            List<ContextItem> ftsResults,
            List<ContextItem> jpqlResults,
            List<ContextItem> finalResults) {

        logger.info("üîç Resultados da busca h√≠brida:");
        logger.info("  üß† Vector: {} resultados", vectorResults.size());
        logger.info("  üî§ FTS: {} resultados", ftsResults.size());
        logger.info("  üìù JPQL: {} resultados", jpqlResults.size());
        logger.info("  üéØ Final: {} resultados √∫nicos", finalResults.size());

        // Mostrar distribui√ß√£o de fontes
        long biblicalNotes = finalResults.stream().filter(ContextItem::isBiblicalNote).count();
        long confessional = finalResults.stream().filter(item -> !item.isBiblicalNote()).count();

        logger.info("  üìñ Fontes b√≠blicas: {}, ‚õ™ Fontes confessionais: {}", biblicalNotes, confessional);

        // Top 3 com detalhes
        for (int i = 0; i < Math.min(3, finalResults.size()); i++) {
            ContextItem item = finalResults.get(i);
            String type = item.isBiblicalNote() ? "üìñ" : "‚õ™";
            logger.info("  {}. {} [Score: {}] {}",
                    i + 1, type, String.format("%.3f", item.similarityScore()), item.source());
        }

        // Qualidade geral
        double avgScore = finalResults.stream()
                .mapToDouble(ContextItem::similarityScore)
                .average()
                .orElse(0.0);

        String qualityEmoji = avgScore > 0.8 ? "üî•" : avgScore > 0.6 ? "‚úÖ" : "‚ö†Ô∏è";
        logger.info("  {} Qualidade m√©dia: {}%", qualityEmoji, String.format("%.1f", avgScore * 100));
    }

    private List<ContextItem> performKeywordSearchFTS(String question, MetadataFilter filter) {
        Set<String> keywords = extractImportantKeywords(question);

        if (keywords.isEmpty()) {
            return Collections.emptyList();
        }

        // Construir query FTS flex√≠vel
        String tsquery = buildIntelligentFTSQuery(keywords, question);

        if (tsquery.isEmpty()) {
            logger.debug("‚ùå N√£o foi poss√≠vel construir query FTS");
            return Collections.emptyList();
        }

        List<ContextItem> results = new ArrayList<>();

        try {
            logger.debug("üîç Executando FTS com query: '{}' E FILTRO: {}", tsquery, filter);

            // Buscar com FTS - APLICANDO FILTROS
            List<Object[]> chunkResults = contentChunkRepository.searchByKeywordsFTS(
                    tsquery,
                    5,
                    filter.obraAcronimo(),      // NOVO
                    filter.capitulo(),        // NOVO
                    filter.secaoOuVersiculo() // NOVO
            );
            List<Object[]> noteResults = studyNoteRepository.searchByKeywordsFTS(
                    tsquery,
                    5,
                    filter.livroBiblico(),    // NOVO
                    filter.capitulo(),        // NOVO
                    filter.secaoOuVersiculo() // NOVO
            );

            logger.debug("  üìÑ FTS Chunks encontrados: {}", chunkResults.size());
            logger.debug("  üìñ FTS Notes encontradas: {}", noteResults.size());

            // Converter resultados
            results.addAll(convertFTSChunkResults(chunkResults, keywords));
            results.addAll(convertFTSNoteResults(noteResults, keywords));

            logger.debug("‚úÖ FTS encontrou {} resultados √∫nicos", results.size());

            // ‚úÖ Se n√£o encontrou nada, tentar termo principal - APLICANDO FILTROS
            if (results.isEmpty() && !keywords.isEmpty()) {
                String mainTerm = keywords.stream()
                        .filter(k -> k.length() > 4)
                        .findFirst()
                        .orElse(keywords.iterator().next());

                logger.info("üîÑ Tentando FTS com termo principal: '{}' E FILTRO: {}", mainTerm, filter);

                List<Object[]> fallbackChunks = contentChunkRepository.searchByKeywordsFTS(
                        mainTerm,
                        3,
                        filter.obraAcronimo(),      // NOVO
                        filter.capitulo(),        // NOVO
                        filter.secaoOuVersiculo() // NOVO
                );
                List<Object[]> fallbackNotes = studyNoteRepository.searchByKeywordsFTS(
                        mainTerm,
                        3,
                        filter.livroBiblico(),    // NOVO
                        filter.capitulo(),        // NOVO
                        filter.secaoOuVersiculo() // NOVO
                );

                results.addAll(convertFTSChunkResults(fallbackChunks, keywords));
                results.addAll(convertFTSNoteResults(fallbackNotes, keywords));

                logger.debug("‚úÖ Fallback FTS encontrou {} resultados", results.size());
            }

        } catch (Exception e) {
            logger.warn("‚ùå FTS falhou: {}", e.getMessage());
            return Collections.emptyList();
        }

        return results;
    }

    private String buildIntelligentFTSQuery(Set<String> keywords, String originalQuestion) {
        List<String> validKeywords = keywords.stream()
                .filter(k -> k.length() > 2)
                .filter(k -> !STOP_WORDS.contains(k))
                .filter(k -> !k.matches("\\d+"))
                .collect(Collectors.toList());

        if (validKeywords.isEmpty()) {
            return "";
        }

        // ‚úÖ ESTRAT√âGIA: Sempre usar OR para m√°xima cobertura
        List<String> searchTerms = new ArrayList<>();

        for (String keyword : validKeywords.stream().limit(5).collect(Collectors.toList())) {
            searchTerms.add(keyword);

            // Adicionar varia√ß√µes para termos importantes
            switch (keyword.toLowerCase()) {
                case "b√≠blia":
                    searchTerms.add("escritura");
                    searchTerms.add("palavra");
                    break;
                case "batismo":
                    searchTerms.add("batizar");
                    searchTerms.add("batismal");
                    break;
                case "infantil":
                    searchTerms.add("crian√ßa");
                    searchTerms.add("beb√™");
                    searchTerms.add("infante");
                    break;
                case "salva√ß√£o":
                    searchTerms.add("reden√ß√£o");
                    searchTerms.add("justifica√ß√£o");
                    break;
                case "gra√ßa":
                    searchTerms.add("favor");
                    searchTerms.add("miseric√≥rdia");
                    break;
                case "f√©":
                    searchTerms.add("cren√ßa");
                    searchTerms.add("confian√ßa");
                    break;
                case "pecado":
                    searchTerms.add("transgress√£o");
                    searchTerms.add("iniquidade");
                    break;
            }
        }

        // ‚úÖ Usar OR para encontrar qualquer conte√∫do relevante
        String query = String.join(" | ", searchTerms.stream()
                .distinct()
                .limit(8)
                .collect(Collectors.toList()));

        logger.debug("  üîç Query FTS flex√≠vel (OR): {}", query);
        return query;
    }

    private Optional<QueryServiceResult> handleDirectReferenceQuery(String userQuestion) {
        // Padr√£o 1: Confiss√µes - VERS√ÉO MELHORADA E FLEX√çVEL
        Pattern confessionalPattern = Pattern.compile(
                // Grupo 1: Nome completo ou acr√¥nimo
                "\\b(?:(CFW|Confiss.o(?: de F.)? de Westminster)|" +
                        "(CM|Catecismo Maior(?: de Westminster)?)|" +
                        "(BC|Breve Catecismo(?: de Westminster)?)|" +
                        "(TSB|Teologia Sistem.tica)|" +
                        "(ICR|Institutas))\\b" +

                        // Separador opcional (v√≠rgula, espa√ßo, "pergunta", "cap√≠tulo")
                        "[\\s,]*" +
                        "(?:pergunta|capitulo|cap\\.?|p\\.?\\s*)?" +

                        // Grupo 2: N√∫mero do cap√≠tulo ou pergunta
                        "(\\d+)" +

                        // Grupo 3: N√∫mero da se√ß√£o (opcional)
                        "(?:[:.](\\d+))?",
                Pattern.CASE_INSENSITIVE
        );
        Matcher confessionalMatcher = confessionalPattern.matcher(userQuestion);

        // Padr√£o 2: B√≠blia (seu padr√£o b√≠blico est√° bom, mantemos igual)
        Pattern biblicalPattern = Pattern.compile(
                "(?:\\b(BG|B√≠blia de Genebra)\\s*-?\\s*)?" +
                        "((?:\\d+\\s+)?[A-Za-z√Ä-√ø]+(?:\\s+[A-Za-z√Ä-√ø]+)*)" +
                        "\\s+" +
                        "(\\d+)" +
                        "[:.](\\d+(?:-\\d+)?)",
                Pattern.CASE_INSENSITIVE
        );
        Matcher biblicalMatcher = biblicalPattern.matcher(userQuestion);

        // --- BLOCO 1: Busca Confessional (L√ìGICA ATUALIZADA) ---
        if (confessionalMatcher.find()) {
            // Mapear o que foi encontrado para o acr√¥nimo correto
            String acronym = null;
            if (confessionalMatcher.group(1) != null) acronym = "CFW";
            else if (confessionalMatcher.group(2) != null) acronym = "CM";
            else if (confessionalMatcher.group(3) != null) acronym = "BC";
            else if (confessionalMatcher.group(4) != null) acronym = "TSB";
            else if (confessionalMatcher.group(5) != null) acronym = "ICR";

            if (acronym == null) return Optional.empty(); // Seguran√ßa

            int chapterOrQuestion = Integer.parseInt(confessionalMatcher.group(6)); // O grupo do n√∫mero mudou!
            Integer section = confessionalMatcher.group(7) != null ?
                    Integer.parseInt(confessionalMatcher.group(7)) : null;

            logger.info("üîç Refer√™ncia direta CONFESSIONAL detectada: {} {}{}",
                    acronym.toUpperCase(), chapterOrQuestion,
                    (section != null ? "." + section : ""));

            // O resto da sua l√≥gica aqui est√° perfeito e n√£o precisa mudar.
            List<ContentChunk> results = contentChunkRepository.findDirectReference(
                    acronym, chapterOrQuestion, section
            );

            if (results.isEmpty()) {
                logger.warn("‚ö†Ô∏è Refer√™ncia confessional {} n√£o encontrada.", acronym.toUpperCase());
                return Optional.empty();
            }

            ContentChunk directHit = results.get(0);
            ContextItem context = ContextItem.from(directHit, 1.0);

            String focusedPrompt = String.format("""
            Voc√™ √© um assistente teol√≥gico reformado. O usu√°rio solicitou uma consulta direta a um documento confessional.
            Sua tarefa √© explicar o texto fornecido de forma clara e objetiva.
            
            DOCUMENTO: %s
            REFER√äNCIA: %s %d%s
            TEXTO ENCONTRADO:
            "%s"
            
            INSTRU√á√ïES:
            1.  Comece confirmando a refer√™ncia (Ex: "A pergunta %d do Catecismo Maior de Westminster diz...").
            2.  Explique o significado teol√≥gico do texto em suas pr√≥prias palavras.
            3.  Seja direto e focado exclusivamente no texto fornecido.
            
            EXPLICA√á√ÉO:
            """,
                    directHit.getWork().getTitle(),
                    acronym.toUpperCase(), chapterOrQuestion, (section != null ? "." + section : ""),
                    directHit.getContent(),
                    chapterOrQuestion, (section != null ? section : 1)
            );

            String aiAnswer = geminiApiClient.generateContent(
                    focusedPrompt, Collections.emptyList(), userQuestion
            );

            SourceReference ref = new SourceReference(1, context.source(), context.content());
            QueryServiceResult response = new QueryServiceResult(aiAnswer, List.of(ref));

            return Optional.of(response);
        }

        // --- BLOCO 2: Busca B√≠blica (CORRIGIDO) ---
        else if (biblicalMatcher.find()) {

            // üëá EXTRA√á√ÉO CORRIGIDA DOS GRUPOS
            String book = biblicalMatcher.group(2).trim();      // Nome do livro
            int chapter = Integer.parseInt(biblicalMatcher.group(3));  // Cap√≠tulo
            String verseGroup = biblicalMatcher.group(4);       // Vers√≠culo(s)
            int verse = Integer.parseInt(verseGroup.split("-")[0]); // Primeiro vers√≠culo

            logger.info("üîç Refer√™ncia direta B√çBLICA detectada: {} {}:{}", book, chapter, verse);

            // üîß NORMALIZAR NOME DO LIVRO (remover n√∫meros duplicados)
            book = normalizeBookName(book);

            logger.info("üìñ Livro normalizado: '{}'", book);

            List<StudyNote> results = studyNoteRepository.findByBiblicalReference(
                    book, chapter, verse
            );

            if (results.isEmpty()) {
                logger.warn("‚ö†Ô∏è Refer√™ncia b√≠blica direta {}:{}:{} n√£o encontrada.",
                        book, chapter, verse);
                return Optional.empty();
            }

            StudyNote directHit = results.get(0);
            ContextItem context = ContextItem.from(directHit, 1.0);

            String focusedPrompt = String.format("""
            Voc√™ √© um assistente teol√≥gico reformado. O usu√°rio solicitou uma consulta direta a uma nota de estudo b√≠blica.
            Sua tarefa √© explicar o texto da nota de estudo fornecida de forma clara e objetiva.
            
            DOCUMENTO: %s
            REFER√äNCIA B√çBLICA: %s %d:%d
            NOTA DE ESTUDO ENCONTRADA:
            "%s"
            
            INSTRU√á√ïES:
            1.  Confirme a refer√™ncia b√≠blica (Ex: "Para %s %d:%d, a nota de estudo da B√≠blia de Genebra explica que...").
            2.  Explique o significado teol√≥gico da nota de estudo fornecida.
            3.  Seja direto e focado exclusivamente no texto da nota.
            
            EXPLICA√á√ÉO:
            """,
                    context.source(),
                    book, chapter, verse,
                    directHit.getNoteContent(),
                    book, chapter, verse
            );

            String aiAnswer = geminiApiClient.generateContent(
                    focusedPrompt, Collections.emptyList(), userQuestion
            );

            SourceReference ref = new SourceReference(1, context.source(), context.content());
            QueryServiceResult response = new QueryServiceResult(aiAnswer, List.of(ref));

            return Optional.of(response);
        }

        return Optional.empty();
    }

    private String normalizeBookName(String rawBookName) {
        if (rawBookName == null || rawBookName.isEmpty()) {
            return rawBookName;
        }

        // 1. Remover espa√ßos extras
        String normalized = rawBookName.trim().replaceAll("\\s+", " ");

        // 2. Remover n√∫meros duplicados no in√≠cio (ex: "1 1 Cor√≠ntios" -> "1 Cor√≠ntios")
        normalized = normalized.replaceAll("^(\\d+)\\s+\\1\\s+", "$1 ");

        // 3. Corrigir casos onde o n√∫mero foi separado (ex: "1Cor√≠ntios" -> "1 Cor√≠ntios")
        normalized = normalized.replaceAll("^(\\d+)([A-Za-z√Ä-√ø])", "$1 $2");

        logger.debug("üìù Normaliza√ß√£o: '{}' -> '{}'", rawBookName, normalized);

        return normalized;
    }

    private Optional<Integer> extractSourceNumberFromQuestion(String userQuestion) {
        String qLower = userQuestion.toLowerCase();

        // Procura por "fonte 1", "n√∫mero 1", "sobre a 1", "e a 1?" etc.
        // O grupo (\\d+) captura o n√∫mero.
        Pattern pattern = Pattern.compile("(?:fonte|n√∫mero|sobre|e a)\\s*(\\d+)");
        Matcher matcher = pattern.matcher(qLower);

        if (matcher.find()) {
            try {
                return Optional.of(Integer.parseInt(matcher.group(1)));
            } catch (NumberFormatException e) {
                return Optional.empty();
            }
        }
        return Optional.empty();
    }

    private Optional<String> extractSourceFromHistory(List<Mensagem> chatHistory, int sourceNumber) {
        if (chatHistory.size() < 2) { // Precisa de P + R
            return Optional.empty();
        }

        Mensagem lastAiResponse = null;
        // Itera para tr√°s para encontrar a √∫ltima resposta do 'assistant'
        for (int i = chatHistory.size() - 2; i >= 0; i--) {
            if (chatHistory.get(i).getRole().equals("assistant")) {
                lastAiResponse = chatHistory.get(i);
                break;
            }
        }

        if (lastAiResponse == null) {
            return Optional.empty(); // Nenhuma resposta de IA encontrada no hist√≥rico
        }

        String aiContent = lastAiResponse.getContent();
        int sourcesIndex = aiContent.indexOf("Fontes Consultadas");
        if (sourcesIndex == -1) {
            return Optional.empty(); // IA n√£o listou fontes
        }

        String sourcesBlock = aiContent.substring(sourcesIndex);

        // --- CORRE√á√ÉO DO REGEX ABAIXO ---

        // Mapeia os n√∫meros para os caracteres sobrescritos
        char superscriptChar = ' ';
        if (sourceNumber == 1) superscriptChar = '\u00B9'; // ¬π
        else if (sourceNumber == 2) superscriptChar = '\u00B2'; // ¬≤
        else if (sourceNumber == 3) superscriptChar = '\u00B3'; // ¬≥
        else if (sourceNumber == 4) superscriptChar = '\u2074'; // ‚Å¥
        else if (sourceNumber == 5) superscriptChar = '\u2075'; // ‚Åµ
        // (Adicione mais se precisar)

        // Tenta Regex 1: Procurar pelo superscript (ex: "¬π ...")
        // Removemos o ^ (in√≠cio da linha) e o MULTILINE.
        Pattern patternSimple = Pattern.compile(
                Pattern.quote(String.valueOf(superscriptChar)) + "\\s+(.+)"
        );
        Matcher matcher = patternSimple.matcher(sourcesBlock);

        if (matcher.find()) {
            String sourceName = matcher.group(1).trim();
            // Pega apenas a primeira linha da correspond√™ncia
            return Optional.of(sourceName.split("\n")[0].trim());
        } else {
            // Tenta Regex 2: Procurar por n√∫mero normal (ex: "1. ...")
            // Usamos \b (word boundary) para n√£o confundir "10" com "1"
            Pattern patternComplex = Pattern.compile(
                    "\\b" + sourceNumber + "[.:]?\\s+(.+)"
            );
            Matcher matcherComplex = patternComplex.matcher(sourcesBlock);

            if (matcherComplex.find()) {
                String sourceName = matcherComplex.group(1).trim();
                // Pega apenas a primeira linha da correspond√™ncia
                return Optional.of(sourceName.split("\n")[0].trim());
            }
        }

        logger.warn("N√£o foi poss√≠vel encontrar a fonte n¬∫ {} no bloco: {}", sourceNumber, sourcesBlock);
        return Optional.empty();
    }


}

